
DoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005380  08005380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800558c  0800558c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005594  08005594  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005598  08005598  00006598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800559c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000003bc  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d760  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d45  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00016540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0a  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023810  00000000  00000000  00017c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea88  00000000  00000000  0003b422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da75e  00000000  00000000  00049eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124608  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b18  00000000  00000000  0012464c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00128164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005368 	.word	0x08005368

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08005368 	.word	0x08005368

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 f936 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f820 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fadc 	bl	8000b78 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005c0:	f000 f916 	bl	80007f0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 faae 	bl	8000b24 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80005c8:	f000 f960 	bl	800088c <MX_TIM4_Init>
  MX_TIM2_Init();
 80005cc:	f000 f8c2 	bl	8000754 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005d0:	f000 f9d4 	bl	800097c <MX_TIM5_Init>
  MX_TIM9_Init();
 80005d4:	f000 fa20 	bl	8000a18 <MX_TIM9_Init>
  MX_TIM10_Init();
 80005d8:	f000 fa80 	bl	8000adc <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005dc:	f000 f86e 	bl	80006bc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <main+0x44>)
 80005e2:	f002 f9d3 	bl	800298c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <main+0x48>)
 80005ea:	f002 fac7 	bl	8002b7c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x3e>
 80005f2:	bf00      	nop
 80005f4:	200000cc 	.word	0x200000cc
 80005f8:	20000114 	.word	0x20000114

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fa24 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xb8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <SystemClock_Config+0xb8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <SystemClock_Config+0xb8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <SystemClock_Config+0xbc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <SystemClock_Config+0xbc>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <SystemClock_Config+0xbc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fce3 	bl	800203c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800067c:	f000 fe70 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 ff46 	bl	800252c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a6:	f000 fe5b 	bl	8001360 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	201d      	movs	r0, #29
 80006c6:	f001 f9fa 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006ca:	201d      	movs	r0, #29
 80006cc:	f001 fa13 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	2028      	movs	r0, #40	@ 0x28
 80006d6:	f001 f9f2 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006da:	2028      	movs	r0, #40	@ 0x28
 80006dc:	f001 fa0b 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2027      	movs	r0, #39	@ 0x27
 80006e6:	f001 f9ea 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80006ea:	2027      	movs	r0, #39	@ 0x27
 80006ec:	f001 fa03 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	201c      	movs	r0, #28
 80006f6:	f001 f9e2 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006fa:	201c      	movs	r0, #28
 80006fc:	f001 f9fb 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2008      	movs	r0, #8
 8000706:	f001 f9da 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800070a:	2008      	movs	r0, #8
 800070c:	f001 f9f3 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2032      	movs	r0, #50	@ 0x32
 8000716:	f001 f9d2 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800071a:	2032      	movs	r0, #50	@ 0x32
 800071c:	f001 f9eb 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2009      	movs	r0, #9
 8000726:	f001 f9ca 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800072a:	2009      	movs	r0, #9
 800072c:	f001 f9e3 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2007      	movs	r0, #7
 8000736:	f001 f9c2 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800073a:	2007      	movs	r0, #7
 800073c:	f001 f9db 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2019      	movs	r0, #25
 8000746:	f001 f9ba 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800074a:	2019      	movs	r0, #25
 800074c:	f001 f9d3 	bl	8001af6 <HAL_NVIC_EnableIRQ>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_TIM2_Init+0x98>)
 800077a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800077e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000788:	f241 3287 	movw	r2, #4999	@ 0x1387
 800078c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079a:	4814      	ldr	r0, [pc, #80]	@ (80007ec <MX_TIM2_Init+0x98>)
 800079c:	f002 f8a6 	bl	80028ec <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a6:	f000 fddb 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_TIM2_Init+0x98>)
 80007b8:	f002 fc5a 	bl	8003070 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007c2:	f000 fdcd 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007c6:	2320      	movs	r3, #32
 80007c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <MX_TIM2_Init+0x98>)
 80007d4:	f003 f858 	bl	8003888 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007de:	f000 fdbf 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000084 	.word	0x20000084

080007f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_TIM3_Init+0x94>)
 800080e:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <MX_TIM3_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_TIM3_Init+0x94>)
 8000814:	229f      	movs	r2, #159	@ 0x9f
 8000816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_TIM3_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_TIM3_Init+0x94>)
 8000820:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_TIM3_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_TIM3_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000832:	4814      	ldr	r0, [pc, #80]	@ (8000884 <MX_TIM3_Init+0x94>)
 8000834:	f002 f85a 	bl	80028ec <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 fd8f 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_TIM3_Init+0x94>)
 8000850:	f002 fc0e 	bl	8003070 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fd81 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800085e:	2320      	movs	r3, #32
 8000860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_TIM3_Init+0x94>)
 800086c:	f003 f80c 	bl	8003888 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000876:	f000 fd73 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000cc 	.word	0x200000cc
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	@ 0x38
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008be:	4a2e      	ldr	r2, [pc, #184]	@ (8000978 <MX_TIM4_Init+0xec>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008c4:	220f      	movs	r2, #15
 80008c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008d0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008e2:	4824      	ldr	r0, [pc, #144]	@ (8000974 <MX_TIM4_Init+0xe8>)
 80008e4:	f002 f802 	bl	80028ec <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80008ee:	f000 fd37 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fc:	4619      	mov	r1, r3
 80008fe:	481d      	ldr	r0, [pc, #116]	@ (8000974 <MX_TIM4_Init+0xe8>)
 8000900:	f002 fbb6 	bl	8003070 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800090a:	f000 fd29 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800090e:	4819      	ldr	r0, [pc, #100]	@ (8000974 <MX_TIM4_Init+0xe8>)
 8000910:	f002 f8db 	bl	8002aca <HAL_TIM_PWM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800091a:	f000 fd21 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4619      	mov	r1, r3
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <MX_TIM4_Init+0xe8>)
 800092e:	f002 ffab 	bl	8003888 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000938:	f000 fd12 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	@ 0x60
 800093e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8000940:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <MX_TIM4_Init+0xe8>)
 8000956:	f002 fac9 	bl	8002eec <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000960:	f000 fcfe 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000964:	4803      	ldr	r0, [pc, #12]	@ (8000974 <MX_TIM4_Init+0xe8>)
 8000966:	f000 fdb7 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3738      	adds	r7, #56	@ 0x38
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000114 	.word	0x20000114
 8000978:	40000800 	.word	0x40000800

0800097c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_TIM5_Init+0x94>)
 800099a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a14 <MX_TIM5_Init+0x98>)
 800099c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15999;
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009a0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80009a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009ae:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80009b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009c2:	f001 ff93 	bl	80028ec <HAL_TIM_Base_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80009cc:	f000 fcc8 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009de:	f002 fb47 	bl	8003070 <HAL_TIM_ConfigClockSource>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80009e8:	f000 fcba 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ec:	2320      	movs	r3, #32
 80009ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_TIM5_Init+0x94>)
 80009fa:	f002 ff45 	bl	8003888 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 fcac 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000015c 	.word	0x2000015c
 8000a14:	40000c00 	.word	0x40000c00

08000a18 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000a3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a40:	4a25      	ldr	r2, [pc, #148]	@ (8000ad8 <MX_TIM9_Init+0xc0>)
 8000a42:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 15;
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a46:	220f      	movs	r2, #15
 8000a48:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1999;
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a52:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000a56:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000a64:	481b      	ldr	r0, [pc, #108]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a66:	f001 ff41 	bl	80028ec <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fc76 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a78:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a82:	f002 faf5 	bl	8003070 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000a8c:	f000 fc68 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000a90:	4810      	ldr	r0, [pc, #64]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000a92:	f002 f81a 	bl	8002aca <HAL_TIM_PWM_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000a9c:	f000 fc60 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa0:	2360      	movs	r3, #96	@ 0x60
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000ab8:	f002 fa18 	bl	8002eec <HAL_TIM_PWM_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000ac2:	f000 fc4d 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000ac6:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <MX_TIM9_Init+0xbc>)
 8000ac8:	f000 fd06 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001a4 	.word	0x200001a4
 8000ad8:	40014000 	.word	0x40014000

08000adc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <MX_TIM10_Init+0x44>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000ae8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000aec:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 499;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000af6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000afa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_TIM10_Init+0x40>)
 8000b0a:	f001 feef 	bl	80028ec <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000b14:	f000 fc24 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001ec 	.word	0x200001ec
 8000b20:	40014400 	.word	0x40014400

08000b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_USART3_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b5c:	f002 ff24 	bl	80039a8 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f000 fbfb 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000234 	.word	0x20000234
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a45      	ldr	r2, [pc, #276]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a3e      	ldr	r2, [pc, #248]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a37      	ldr	r2, [pc, #220]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a30      	ldr	r2, [pc, #192]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <MX_GPIO_Init+0x150>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD6_Pin|KEYPAD5_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2144      	movs	r1, #68	@ 0x44
 8000c1e:	482b      	ldr	r0, [pc, #172]	@ (8000ccc <MX_GPIO_Init+0x154>)
 8000c20:	f001 f9da 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEYPAD7_GPIO_Port, KEYPAD7_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2101      	movs	r1, #1
 8000c28:	4829      	ldr	r0, [pc, #164]	@ (8000cd0 <MX_GPIO_Init+0x158>)
 8000c2a:	f001 f9d5 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	4826      	ldr	r0, [pc, #152]	@ (8000ccc <MX_GPIO_Init+0x154>)
 8000c34:	f001 f9d0 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEYPAD6_Pin KEYPAD5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = KEYPAD6_Pin|KEYPAD5_Pin|LD2_Pin;
 8000c38:	23c4      	movs	r3, #196	@ 0xc4
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <MX_GPIO_Init+0x154>)
 8000c50:	f000 fffe 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD1_Pin KEYPAD2_Pin KEYPAD3_Pin KEYPAD4_Pin */
  GPIO_InitStruct.Pin = KEYPAD1_Pin|KEYPAD2_Pin|KEYPAD3_Pin|KEYPAD4_Pin;
 8000c54:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481a      	ldr	r0, [pc, #104]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000c6c:	f000 fff0 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEYPAD7_Pin */
  GPIO_InitStruct.Pin = KEYPAD7_Pin;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD7_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <MX_GPIO_Init+0x158>)
 8000c88:	f000 ffe2 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SETUP_SW_Pin DOOR_SW_Pin */
  GPIO_InitStruct.Pin = SETUP_SW_Pin|DOOR_SW_Pin;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_GPIO_Init+0x158>)
 8000ca2:	f000 ffd5 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_SW_Pin */
  GPIO_InitStruct.Pin = STATE_SW_Pin;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000caa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATE_SW_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_GPIO_Init+0x158>)
 8000cbc:	f000 ffc8 	bl	8001c50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	@ 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400
 8000cd0:	40021800 	.word	0x40021800
 8000cd4:	40021400 	.word	0x40021400

08000cd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	GPIO_PinState KEYPAD1, KEYPAD2, KEYPAD3, KEYPAD4, KEYPAD5, KEYPAD6, KEYPAD7;

	if(htim->Instance == TIM3) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a75      	ldr	r2, [pc, #468]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d16d      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0xee>
		if(chk == 0) {		// 스캔
 8000cea:	4b75      	ldr	r3, [pc, #468]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d13b      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x92>
			if(state == STATE1) {
 8000cf2:	4b74      	ldr	r3, [pc, #464]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d109      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x36>
				KEYPAD5 = 0; KEYPAD6 = 1; KEYPAD7 = 1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73bb      	strb	r3, [r7, #14]
 8000d02:	2301      	movs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
				state = STATE2;
 8000d06:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e01a      	b.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x6c>
			}
			else if(state == STATE2) {
 8000d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d109      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x52>
				KEYPAD5 = 1; KEYPAD6 = 0; KEYPAD7 = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	737b      	strb	r3, [r7, #13]
				state = STATE3;
 8000d22:	4b68      	ldr	r3, [pc, #416]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e00c      	b.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x6c>
			}
			else if(state == STATE3) {
 8000d2a:	4b66      	ldr	r3, [pc, #408]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d108      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x6c>
				KEYPAD5 = 1; KEYPAD6 = 1; KEYPAD7 = 0;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	2301      	movs	r3, #1
 8000d38:	73bb      	strb	r3, [r7, #14]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	737b      	strb	r3, [r7, #13]
				state = STATE1;
 8000d3e:	4b61      	ldr	r3, [pc, #388]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
			}

			HAL_GPIO_WritePin(KEYPAD5_GPIO_Port, KEYPAD5_Pin, KEYPAD5);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	461a      	mov	r2, r3
 8000d48:	2140      	movs	r1, #64	@ 0x40
 8000d4a:	485f      	ldr	r0, [pc, #380]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d4c:	f001 f944 	bl	8001fd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD6_GPIO_Port, KEYPAD6_Pin, KEYPAD6);
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	461a      	mov	r2, r3
 8000d54:	2104      	movs	r1, #4
 8000d56:	485c      	ldr	r0, [pc, #368]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d58:	f001 f93e 	bl	8001fd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD7_GPIO_Port, KEYPAD7_Pin, KEYPAD7);
 8000d5c:	7b7b      	ldrb	r3, [r7, #13]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2101      	movs	r1, #1
 8000d62:	485a      	ldr	r0, [pc, #360]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d64:	f001 f938 	bl	8001fd8 <HAL_GPIO_WritePin>
			}
		}
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
		HAL_TIM_Base_Stop_IT(&htim5);
	}
}
 8000d68:	e0a4      	b.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
			KEYPAD1 = HAL_GPIO_ReadPin(KEYPAD1_GPIO_Port, KEYPAD1_Pin);
 8000d6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d6e:	4858      	ldr	r0, [pc, #352]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d70:	f001 f91a 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	72fb      	strb	r3, [r7, #11]
			KEYPAD2 = HAL_GPIO_ReadPin(KEYPAD2_GPIO_Port, KEYPAD2_Pin);
 8000d78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7c:	4854      	ldr	r0, [pc, #336]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d7e:	f001 f913 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	72bb      	strb	r3, [r7, #10]
			KEYPAD3 = HAL_GPIO_ReadPin(KEYPAD3_GPIO_Port, KEYPAD3_Pin);
 8000d86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8a:	4851      	ldr	r0, [pc, #324]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d8c:	f001 f90c 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	727b      	strb	r3, [r7, #9]
			KEYPAD4 = HAL_GPIO_ReadPin(KEYPAD4_GPIO_Port, KEYPAD4_Pin);
 8000d94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d98:	484d      	ldr	r0, [pc, #308]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d9a:	f001 f905 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	723b      	strb	r3, [r7, #8]
			if(KEYPAD1 == 1 && KEYPAD2 == 1 && KEYPAD3 == 1 && KEYPAD4 == 1) {	// 키가 눌리지 않았을 때
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f040 8085 	bne.w	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 8081 	bne.w	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8000db2:	7a7b      	ldrb	r3, [r7, #9]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d17d      	bne.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8000db8:	7a3b      	ldrb	r3, [r7, #8]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d17a      	bne.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
				chk = 0;
 8000dbe:	4b40      	ldr	r3, [pc, #256]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	e076      	b.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
	else if(htim->Instance == TIM2) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dce:	d125      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x144>
		if(is_door_lock == 0 && is_door_open == 0) {
 8000dd0:	4b40      	ldr	r3, [pc, #256]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11d      	bne.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d119      	bne.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x13c>
			is_door_lock = 1;
 8000de0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
			TIM4->CCR1 = 499;
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000de8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
			sprintf(tx_buf, "\n\r시간 초과로 문이 닫혔습니다.\n\r");
 8000dee:	493c      	ldr	r1, [pc, #240]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000df0:	483c      	ldr	r0, [pc, #240]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000df2:	f003 fe11 	bl	8004a18 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 8000df6:	483b      	ldr	r0, [pc, #236]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000df8:	f7ff fa04 	bl	8000204 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	4938      	ldr	r1, [pc, #224]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e04:	4838      	ldr	r0, [pc, #224]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000e06:	f002 feaa 	bl	8003b5e <HAL_UART_Transmit_IT>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	482e      	ldr	r0, [pc, #184]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000e10:	f001 f8e2 	bl	8001fd8 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000e14:	4835      	ldr	r0, [pc, #212]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e16:	f001 fe29 	bl	8002a6c <HAL_TIM_Base_Stop_IT>
}
 8000e1a:	e04b      	b.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
	else if(htim->Instance == TIM5) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a33      	ldr	r2, [pc, #204]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d146      	bne.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
		GPIO_PinState STATE_SW = HAL_GPIO_ReadPin(STATE_SW_GPIO_Port, STATE_SW_Pin);
 8000e26:	2104      	movs	r1, #4
 8000e28:	4828      	ldr	r0, [pc, #160]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000e2a:	f001 f8bd 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	733b      	strb	r3, [r7, #12]
		if(is_door_open == 1) {
 8000e32:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d114      	bne.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x18c>
			if(STATE_SW == 0) {
 8000e3a:	7b3b      	ldrb	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10c      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x182>
				is_door_really_open = 1;
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
				sprintf(tx_buf, "\n\r문이 열렸습니다.\n\r");
 8000e46:	492c      	ldr	r1, [pc, #176]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000e48:	4826      	ldr	r0, [pc, #152]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e4a:	f003 fde5 	bl	8004a18 <siprintf>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	@ 0x80
 8000e52:	481d      	ldr	r0, [pc, #116]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000e54:	f001 f8c0 	bl	8001fd8 <HAL_GPIO_WritePin>
 8000e58:	e01f      	b.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x1c2>
				sprintf(tx_buf, "\n\r문이 열리지 않았습니다.\n\r");
 8000e5a:	4928      	ldr	r1, [pc, #160]	@ (8000efc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000e5c:	4821      	ldr	r0, [pc, #132]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e5e:	f003 fddb 	bl	8004a18 <siprintf>
 8000e62:	e01a      	b.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x1c2>
			if(STATE_SW == 1) {
 8000e64:	7b3b      	ldrb	r3, [r7, #12]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d113      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x1ba>
				is_door_really_open = 0;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
				sprintf(tx_buf, "\n\r문이 닫혔습니다.\n\r");
 8000e70:	4923      	ldr	r1, [pc, #140]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000e72:	481c      	ldr	r0, [pc, #112]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e74:	f003 fdd0 	bl	8004a18 <siprintf>
				is_door_lock = 1;	// 문 잠금장치 ON
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
				TIM4->CCR1 = 499;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e80:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000e84:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	480f      	ldr	r0, [pc, #60]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000e8c:	f001 f8a4 	bl	8001fd8 <HAL_GPIO_WritePin>
 8000e90:	e003      	b.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x1c2>
				sprintf(tx_buf, "\n\r문이 닫히지 않았습니다.\n\r");
 8000e92:	491c      	ldr	r1, [pc, #112]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000e94:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e96:	f003 fdbf 	bl	8004a18 <siprintf>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 8000e9a:	4812      	ldr	r0, [pc, #72]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e9c:	f7ff f9b2 	bl	8000204 <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	490f      	ldr	r1, [pc, #60]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000ea8:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000eaa:	f002 fe58 	bl	8003b5e <HAL_UART_Transmit_IT>
		HAL_TIM_Base_Stop_IT(&htim5);
 8000eae:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000eb0:	f001 fddc 	bl	8002a6c <HAL_TIM_Base_Stop_IT>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	2000027d 	.word	0x2000027d
 8000ec4:	2000027c 	.word	0x2000027c
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	20000009 	.word	0x20000009
 8000ed8:	200002be 	.word	0x200002be
 8000edc:	40000800 	.word	0x40000800
 8000ee0:	08005380 	.word	0x08005380
 8000ee4:	20000280 	.word	0x20000280
 8000ee8:	20000234 	.word	0x20000234
 8000eec:	20000084 	.word	0x20000084
 8000ef0:	40000c00 	.word	0x40000c00
 8000ef4:	200002bf 	.word	0x200002bf
 8000ef8:	080053b0 	.word	0x080053b0
 8000efc:	080053cc 	.word	0x080053cc
 8000f00:	080053f4 	.word	0x080053f4
 8000f04:	08005410 	.word	0x08005410
 8000f08:	2000015c 	.word	0x2000015c

08000f0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time;	// 값 유지, 자동으로 0으로 초기화
	uint32_t current_time = HAL_GetTick();
 8000f16:	f000 fceb 	bl	80018f0 <HAL_GetTick>
 8000f1a:	60f8      	str	r0, [r7, #12]

	if((current_time - last_interrupt_time) < DEBOUNCE_DELAY) {
 8000f1c:	4b95      	ldr	r3, [pc, #596]	@ (8001174 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f26:	f240 81f7 	bls.w	8001318 <HAL_GPIO_EXTI_Callback+0x40c>
		return;
	}
	last_interrupt_time = current_time;
 8000f2a:	4a92      	ldr	r2, [pc, #584]	@ (8001174 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6013      	str	r3, [r2, #0]

	chk = 1;	// 스캔 중단하고 눌린 키의 상태 확인
 8000f30:	4b91      	ldr	r3, [pc, #580]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == KEYPAD1_Pin) {
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f3c:	d117      	bne.n	8000f6e <HAL_GPIO_EXTI_Callback+0x62>
		if(state == STATE2) num = '1';
 8000f3e:	4b8f      	ldr	r3, [pc, #572]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d103      	bne.n	8000f4e <HAL_GPIO_EXTI_Callback+0x42>
 8000f46:	4b8e      	ldr	r3, [pc, #568]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f48:	2231      	movs	r2, #49	@ 0x31
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e062      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE3) num = '2';
 8000f4e:	4b8b      	ldr	r3, [pc, #556]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d103      	bne.n	8000f5e <HAL_GPIO_EXTI_Callback+0x52>
 8000f56:	4b8a      	ldr	r3, [pc, #552]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f58:	2232      	movs	r2, #50	@ 0x32
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e05a      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE1) num = '3';
 8000f5e:	4b87      	ldr	r3, [pc, #540]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d156      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
 8000f66:	4b86      	ldr	r3, [pc, #536]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f68:	2233      	movs	r2, #51	@ 0x33
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e052      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
	}
	else if(GPIO_Pin == KEYPAD2_Pin) {
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f74:	d117      	bne.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x9a>
		if(state == STATE2) num = '4';
 8000f76:	4b81      	ldr	r3, [pc, #516]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d103      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x7a>
 8000f7e:	4b80      	ldr	r3, [pc, #512]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f80:	2234      	movs	r2, #52	@ 0x34
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	e046      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE3) num = '5';
 8000f86:	4b7d      	ldr	r3, [pc, #500]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d103      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x8a>
 8000f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f90:	2235      	movs	r2, #53	@ 0x35
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e03e      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE1) num = '6';
 8000f96:	4b79      	ldr	r3, [pc, #484]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d13a      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
 8000f9e:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000fa0:	2236      	movs	r2, #54	@ 0x36
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e036      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
	}
	else if(GPIO_Pin == KEYPAD3_Pin) {
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000fac:	d117      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0xd2>
		if(state == STATE2) num = '7';
 8000fae:	4b73      	ldr	r3, [pc, #460]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d103      	bne.n	8000fbe <HAL_GPIO_EXTI_Callback+0xb2>
 8000fb6:	4b72      	ldr	r3, [pc, #456]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000fb8:	2237      	movs	r2, #55	@ 0x37
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e02a      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE3) num = '8';
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d103      	bne.n	8000fce <HAL_GPIO_EXTI_Callback+0xc2>
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000fc8:	2238      	movs	r2, #56	@ 0x38
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e022      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE1) num = '9';
 8000fce:	4b6b      	ldr	r3, [pc, #428]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d11e      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000fd8:	2239      	movs	r2, #57	@ 0x39
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e01a      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
	}
	else if(GPIO_Pin == KEYPAD4_Pin) {
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fe4:	d116      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		if(state == STATE2) num = '*';
 8000fe6:	4b65      	ldr	r3, [pc, #404]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d103      	bne.n	8000ff6 <HAL_GPIO_EXTI_Callback+0xea>
 8000fee:	4b64      	ldr	r3, [pc, #400]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8000ff0:	222a      	movs	r2, #42	@ 0x2a
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e00e      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE3) num = '0';
 8000ff6:	4b61      	ldr	r3, [pc, #388]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d103      	bne.n	8001006 <HAL_GPIO_EXTI_Callback+0xfa>
 8000ffe:	4b60      	ldr	r3, [pc, #384]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8001000:	2230      	movs	r2, #48	@ 0x30
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e006      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
		else if(state == STATE1) num = '#';
 8001006:	4b5d      	ldr	r3, [pc, #372]	@ (800117c <HAL_GPIO_EXTI_Callback+0x270>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x108>
 800100e:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8001010:	2223      	movs	r2, #35	@ 0x23
 8001012:	701a      	strb	r2, [r3, #0]
	}

	if(is_door_open == 1 && GPIO_Pin == SETUP_SW_Pin) {
 8001014:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x278>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d116      	bne.n	800104a <HAL_GPIO_EXTI_Callback+0x13e>
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d113      	bne.n	800104a <HAL_GPIO_EXTI_Callback+0x13e>
		setup_pw = 1;
 8001022:	4b59      	ldr	r3, [pc, #356]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
		pw_index = 0;
 8001028:	4b58      	ldr	r3, [pc, #352]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
		sprintf(tx_buf, "\n\r새 비밀번호를 입력하세요.\n\r");
 800102e:	4958      	ldr	r1, [pc, #352]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x284>)
 8001030:	4858      	ldr	r0, [pc, #352]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 8001032:	f003 fcf1 	bl	8004a18 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)tx_buf, strlen(tx_buf), 100);
 8001036:	4857      	ldr	r0, [pc, #348]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 8001038:	f7ff f8e4 	bl	8000204 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	2364      	movs	r3, #100	@ 0x64
 8001042:	4954      	ldr	r1, [pc, #336]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 8001044:	4854      	ldr	r0, [pc, #336]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001046:	f002 fcff 	bl	8003a48 <HAL_UART_Transmit>
	}

	if(GPIO_Pin == KEYPAD1_Pin || GPIO_Pin == KEYPAD2_Pin || GPIO_Pin == KEYPAD3_Pin || GPIO_Pin == KEYPAD4_Pin) {
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001050:	d00c      	beq.n	800106c <HAL_GPIO_EXTI_Callback+0x160>
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001058:	d008      	beq.n	800106c <HAL_GPIO_EXTI_Callback+0x160>
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001060:	d004      	beq.n	800106c <HAL_GPIO_EXTI_Callback+0x160>
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001068:	f040 80f0 	bne.w	800124c <HAL_GPIO_EXTI_Callback+0x340>
		if(setup_pw == 1) {
 800106c:	4b46      	ldr	r3, [pc, #280]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x27c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d15a      	bne.n	800112a <HAL_GPIO_EXTI_Callback+0x21e>
			if(num != '*') {
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b2a      	cmp	r3, #42	@ 0x2a
 800107a:	d037      	beq.n	80010ec <HAL_GPIO_EXTI_Callback+0x1e0>
				if(pw_index < 8) {
 800107c:	4b43      	ldr	r3, [pc, #268]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d81c      	bhi.n	80010be <HAL_GPIO_EXTI_Callback+0x1b2>
					new_pw[pw_index++] = num;
 8001084:	4b41      	ldr	r3, [pc, #260]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	b2d1      	uxtb	r1, r2
 800108c:	4a3f      	ldr	r2, [pc, #252]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 800108e:	7011      	strb	r1, [r2, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8001094:	7819      	ldrb	r1, [r3, #0]
 8001096:	4b41      	ldr	r3, [pc, #260]	@ (800119c <HAL_GPIO_EXTI_Callback+0x290>)
 8001098:	5499      	strb	r1, [r3, r2]
					sprintf(tx_buf, "%c", num);
 800109a:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	493f      	ldr	r1, [pc, #252]	@ (80011a0 <HAL_GPIO_EXTI_Callback+0x294>)
 80010a2:	483c      	ldr	r0, [pc, #240]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 80010a4:	f003 fcb8 	bl	8004a18 <siprintf>
					HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 80010a8:	483a      	ldr	r0, [pc, #232]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 80010aa:	f7ff f8ab 	bl	8000204 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	4937      	ldr	r1, [pc, #220]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 80010b6:	4838      	ldr	r0, [pc, #224]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x28c>)
 80010b8:	f002 fd51 	bl	8003b5e <HAL_UART_Transmit_IT>
 80010bc:	e0c6      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x340>
				}
				else {
					sprintf(tx_buf, "\n\r다시 입력하세요.\n\r");
 80010be:	4939      	ldr	r1, [pc, #228]	@ (80011a4 <HAL_GPIO_EXTI_Callback+0x298>)
 80010c0:	4834      	ldr	r0, [pc, #208]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 80010c2:	f003 fca9 	bl	8004a18 <siprintf>
					HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 80010c6:	4833      	ldr	r0, [pc, #204]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 80010c8:	f7ff f89c 	bl	8000204 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4930      	ldr	r1, [pc, #192]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 80010d4:	4830      	ldr	r0, [pc, #192]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x28c>)
 80010d6:	f002 fd42 	bl	8003b5e <HAL_UART_Transmit_IT>
					pw_index = 0;
 80010da:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
					memset(new_pw, 0, sizeof(new_pw));
 80010e0:	2209      	movs	r2, #9
 80010e2:	2100      	movs	r1, #0
 80010e4:	482d      	ldr	r0, [pc, #180]	@ (800119c <HAL_GPIO_EXTI_Callback+0x290>)
 80010e6:	f003 fcb7 	bl	8004a58 <memset>
 80010ea:	e0af      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x340>
				}
			}
			else {
				new_pw[pw_index] = '\0';
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_GPIO_EXTI_Callback+0x290>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]
				strcpy(password, new_pw);		// 기존 비밀번호를 새 비밀번호로 교체
 80010f8:	4928      	ldr	r1, [pc, #160]	@ (800119c <HAL_GPIO_EXTI_Callback+0x290>)
 80010fa:	482b      	ldr	r0, [pc, #172]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80010fc:	f003 fce0 	bl	8004ac0 <strcpy>
				sprintf(tx_buf, "\n\r비밀번호가 설정되었습니다.\n\r");
 8001100:	492a      	ldr	r1, [pc, #168]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001102:	4824      	ldr	r0, [pc, #144]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 8001104:	f003 fc88 	bl	8004a18 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)tx_buf, strlen(tx_buf), 100);
 8001108:	4822      	ldr	r0, [pc, #136]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 800110a:	f7ff f87b 	bl	8000204 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	2364      	movs	r3, #100	@ 0x64
 8001114:	491f      	ldr	r1, [pc, #124]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 8001116:	4820      	ldr	r0, [pc, #128]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001118:	f002 fc96 	bl	8003a48 <HAL_UART_Transmit>
				setup_pw = 0;	// 비밀번호 설정 모드 비활성화
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x27c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
				pw_index = 0;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e090      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x340>
			}
		}
		else {
			if(num != '*') {
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001130:	d057      	beq.n	80011e2 <HAL_GPIO_EXTI_Callback+0x2d6>
				if(pw_index < 8) {
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d83c      	bhi.n	80011b4 <HAL_GPIO_EXTI_Callback+0x2a8>
					input_pw[pw_index++] = num;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	b2d1      	uxtb	r1, r2
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_GPIO_EXTI_Callback+0x280>)
 8001144:	7011      	strb	r1, [r2, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 800114a:	7819      	ldrb	r1, [r3, #0]
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800114e:	5499      	strb	r1, [r3, r2]
					sprintf(tx_buf, "%c", num);
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x274>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4912      	ldr	r1, [pc, #72]	@ (80011a0 <HAL_GPIO_EXTI_Callback+0x294>)
 8001158:	480e      	ldr	r0, [pc, #56]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 800115a:	f003 fc5d 	bl	8004a18 <siprintf>
					HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 8001160:	f7ff f850 	bl	8000204 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	490a      	ldr	r1, [pc, #40]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x288>)
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x28c>)
 800116e:	f002 fcf6 	bl	8003b5e <HAL_UART_Transmit_IT>
 8001172:	e06b      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x340>
 8001174:	200002d0 	.word	0x200002d0
 8001178:	2000027d 	.word	0x2000027d
 800117c:	2000027c 	.word	0x2000027c
 8001180:	200002b2 	.word	0x200002b2
 8001184:	200002be 	.word	0x200002be
 8001188:	200002c0 	.word	0x200002c0
 800118c:	200002bd 	.word	0x200002bd
 8001190:	08005438 	.word	0x08005438
 8001194:	20000280 	.word	0x20000280
 8001198:	20000234 	.word	0x20000234
 800119c:	200002c4 	.word	0x200002c4
 80011a0:	08005464 	.word	0x08005464
 80011a4:	08005468 	.word	0x08005468
 80011a8:	20000000 	.word	0x20000000
 80011ac:	08005484 	.word	0x08005484
 80011b0:	200002b4 	.word	0x200002b4
				}
				else {
					sprintf(tx_buf, "\n\r비밀번호가 틀렸습니다.\n\r");
 80011b4:	495a      	ldr	r1, [pc, #360]	@ (8001320 <HAL_GPIO_EXTI_Callback+0x414>)
 80011b6:	485b      	ldr	r0, [pc, #364]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80011b8:	f003 fc2e 	bl	8004a18 <siprintf>
					HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 80011bc:	4859      	ldr	r0, [pc, #356]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80011be:	f7ff f821 	bl	8000204 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	4956      	ldr	r1, [pc, #344]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80011ca:	4857      	ldr	r0, [pc, #348]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x41c>)
 80011cc:	f002 fcc7 	bl	8003b5e <HAL_UART_Transmit_IT>
					pw_index = 0;
 80011d0:	4b56      	ldr	r3, [pc, #344]	@ (800132c <HAL_GPIO_EXTI_Callback+0x420>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
					memset(input_pw, 0, sizeof(input_pw));
 80011d6:	2209      	movs	r2, #9
 80011d8:	2100      	movs	r1, #0
 80011da:	4855      	ldr	r0, [pc, #340]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x424>)
 80011dc:	f003 fc3c 	bl	8004a58 <memset>
 80011e0:	e034      	b.n	800124c <HAL_GPIO_EXTI_Callback+0x340>
				}
			}
			else {
				input_pw[pw_index] = '\0';
 80011e2:	4b52      	ldr	r3, [pc, #328]	@ (800132c <HAL_GPIO_EXTI_Callback+0x420>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b51      	ldr	r3, [pc, #324]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x424>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	5499      	strb	r1, [r3, r2]

				if(strcmp(input_pw, password) == 0) {
 80011ee:	4951      	ldr	r1, [pc, #324]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x428>)
 80011f0:	484f      	ldr	r0, [pc, #316]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x424>)
 80011f2:	f7fe fffd 	bl	80001f0 <strcmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10e      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x30e>
					is_door_lock = 0;		// 문 열림 활성화
 80011fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x42c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim2);
 8001202:	484e      	ldr	r0, [pc, #312]	@ (800133c <HAL_GPIO_EXTI_Callback+0x430>)
 8001204:	f001 fbc2 	bl	800298c <HAL_TIM_Base_Start_IT>
					TIM4->CCR1 = 1499;
 8001208:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x434>)
 800120a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
					sprintf(tx_buf, "\n\r비밀번호가 맞았습니다.\n\r");
 8001210:	494c      	ldr	r1, [pc, #304]	@ (8001344 <HAL_GPIO_EXTI_Callback+0x438>)
 8001212:	4844      	ldr	r0, [pc, #272]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001214:	f003 fc00 	bl	8004a18 <siprintf>
 8001218:	e00b      	b.n	8001232 <HAL_GPIO_EXTI_Callback+0x326>
				}
				else {
					pw_index = 0;
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <HAL_GPIO_EXTI_Callback+0x420>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
					memset(input_pw, 0, sizeof(input_pw));
 8001220:	2209      	movs	r2, #9
 8001222:	2100      	movs	r1, #0
 8001224:	4842      	ldr	r0, [pc, #264]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x424>)
 8001226:	f003 fc17 	bl	8004a58 <memset>
					sprintf(tx_buf, "\n\r비밀번호가 틀렸습니다.\n\r");
 800122a:	493d      	ldr	r1, [pc, #244]	@ (8001320 <HAL_GPIO_EXTI_Callback+0x414>)
 800122c:	483d      	ldr	r0, [pc, #244]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 800122e:	f003 fbf3 	bl	8004a18 <siprintf>
				}
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 8001232:	483c      	ldr	r0, [pc, #240]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001234:	f7fe ffe6 	bl	8000204 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4939      	ldr	r1, [pc, #228]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001240:	4839      	ldr	r0, [pc, #228]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001242:	f002 fc8c 	bl	8003b5e <HAL_UART_Transmit_IT>
				pw_index = 0;
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_GPIO_EXTI_Callback+0x420>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(GPIO_Pin == STATE_SW_Pin) {
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2b04      	cmp	r3, #4
 8001250:	d132      	bne.n	80012b8 <HAL_GPIO_EXTI_Callback+0x3ac>
		GPIO_PinState STATE_SW = HAL_GPIO_ReadPin(STATE_SW_GPIO_Port, STATE_SW_Pin);
 8001252:	2104      	movs	r1, #4
 8001254:	483c      	ldr	r0, [pc, #240]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x43c>)
 8001256:	f000 fea7 	bl	8001fa8 <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	72fb      	strb	r3, [r7, #11]

		if(is_door_lock == 0) {		// 문 잠금장치 OFF
 800125e:	4b36      	ldr	r3, [pc, #216]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x42c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11a      	bne.n	800129c <HAL_GPIO_EXTI_Callback+0x390>
			if(STATE_SW == 0) {		// 토글스위치 ON
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <HAL_GPIO_EXTI_Callback+0x36e>
				is_door_open = 1;	// 문 열림
 800126c:	4b37      	ldr	r3, [pc, #220]	@ (800134c <HAL_GPIO_EXTI_Callback+0x440>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim5);
 8001272:	4837      	ldr	r0, [pc, #220]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x444>)
 8001274:	f001 fb8a 	bl	800298c <HAL_TIM_Base_Start_IT>
 8001278:	e005      	b.n	8001286 <HAL_GPIO_EXTI_Callback+0x37a>
			}
			else {		// 토글스위치 OFF
				is_door_open = 0;	// 문 닫힘
 800127a:	4b34      	ldr	r3, [pc, #208]	@ (800134c <HAL_GPIO_EXTI_Callback+0x440>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim5);
 8001280:	4833      	ldr	r0, [pc, #204]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x444>)
 8001282:	f001 fb83 	bl	800298c <HAL_TIM_Base_Start_IT>
			}
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 8001286:	4827      	ldr	r0, [pc, #156]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001288:	f7fe ffbc 	bl	8000204 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4924      	ldr	r1, [pc, #144]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001294:	4824      	ldr	r0, [pc, #144]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001296:	f002 fc62 	bl	8003b5e <HAL_UART_Transmit_IT>
 800129a:	e00d      	b.n	80012b8 <HAL_GPIO_EXTI_Callback+0x3ac>
		}
		else {		// 문 잠금장치 ON
			sprintf(tx_buf, "\n\r문이 잠겨있습니다.\n\r");
 800129c:	492d      	ldr	r1, [pc, #180]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x448>)
 800129e:	4821      	ldr	r0, [pc, #132]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80012a0:	f003 fbba 	bl	8004a18 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 80012a4:	481f      	ldr	r0, [pc, #124]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80012a6:	f7fe ffad 	bl	8000204 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	491c      	ldr	r1, [pc, #112]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80012b2:	481d      	ldr	r0, [pc, #116]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x41c>)
 80012b4:	f002 fc53 	bl	8003b5e <HAL_UART_Transmit_IT>
		}
	}

	if(GPIO_Pin == DOOR_SW_Pin) {
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d12d      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x40e>
		is_door_lock = !is_door_lock;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x42c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x42c>)
 80012d0:	701a      	strb	r2, [r3, #0]
		if(is_door_lock == 0) {
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x42c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <HAL_GPIO_EXTI_Callback+0x3e6>
			HAL_TIM_Base_Start_IT(&htim2);
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <HAL_GPIO_EXTI_Callback+0x430>)
 80012dc:	f001 fb56 	bl	800298c <HAL_TIM_Base_Start_IT>
			TIM4->CCR1 = 1499;
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x434>)
 80012e2:	f240 52db 	movw	r2, #1499	@ 0x5db
 80012e6:	635a      	str	r2, [r3, #52]	@ 0x34
			sprintf(tx_buf, "\n\rDOOR_SW ON\n\r");
 80012e8:	491b      	ldr	r1, [pc, #108]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x44c>)
 80012ea:	480e      	ldr	r0, [pc, #56]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80012ec:	f003 fb94 	bl	8004a18 <siprintf>
 80012f0:	e007      	b.n	8001302 <HAL_GPIO_EXTI_Callback+0x3f6>
		}
		else {
			TIM4->CCR1 = 499;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x434>)
 80012f4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80012f8:	635a      	str	r2, [r3, #52]	@ 0x34
			sprintf(tx_buf, "\n\rDOOR_SW OFF\n\r");
 80012fa:	4918      	ldr	r1, [pc, #96]	@ (800135c <HAL_GPIO_EXTI_Callback+0x450>)
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 80012fe:	f003 fb8b 	bl	8004a18 <siprintf>
		}
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buf, strlen(tx_buf));
 8001302:	4808      	ldr	r0, [pc, #32]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001304:	f7fe ff7e 	bl	8000204 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4905      	ldr	r1, [pc, #20]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x418>)
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001312:	f002 fc24 	bl	8003b5e <HAL_UART_Transmit_IT>
 8001316:	e000      	b.n	800131a <HAL_GPIO_EXTI_Callback+0x40e>
		return;
 8001318:	bf00      	nop
	}
}
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	080054b0 	.word	0x080054b0
 8001324:	20000280 	.word	0x20000280
 8001328:	20000234 	.word	0x20000234
 800132c:	200002bd 	.word	0x200002bd
 8001330:	200002b4 	.word	0x200002b4
 8001334:	20000000 	.word	0x20000000
 8001338:	20000009 	.word	0x20000009
 800133c:	20000084 	.word	0x20000084
 8001340:	40000800 	.word	0x40000800
 8001344:	080054d8 	.word	0x080054d8
 8001348:	40021800 	.word	0x40021800
 800134c:	200002be 	.word	0x200002be
 8001350:	2000015c 	.word	0x2000015c
 8001354:	08005500 	.word	0x08005500
 8001358:	08005520 	.word	0x08005520
 800135c:	08005530 	.word	0x08005530

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <HAL_MspInit+0x4c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013cc:	d10e      	bne.n	80013ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a3a      	ldr	r2, [pc, #232]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80013ea:	e062      	b.n	80014b2 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a34      	ldr	r2, [pc, #208]	@ (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10e      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b2e      	ldr	r3, [pc, #184]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
}
 8001412:	e04e      	b.n	80014b2 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM4)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2b      	ldr	r2, [pc, #172]	@ (80014c8 <HAL_TIM_Base_MspInit+0x10c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10e      	bne.n	800143c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
}
 800143a:	e03a      	b.n	80014b2 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM5)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <HAL_TIM_Base_MspInit+0x110>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10e      	bne.n	8001464 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
}
 8001462:	e026      	b.n	80014b2 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM9)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_TIM_Base_MspInit+0x114>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10e      	bne.n	800148c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
}
 800148a:	e012      	b.n	80014b2 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_TIM_Base_MspInit+0x118>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
}
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	@ 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40000800 	.word	0x40000800
 80014cc:	40000c00 	.word	0x40000c00
 80014d0:	40014000 	.word	0x40014000
 80014d4:	40014400 	.word	0x40014400

080014d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <HAL_TIM_MspPostInit+0xb0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d11f      	bne.n	800153a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <HAL_TIM_MspPostInit+0xb4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_TIM_MspPostInit+0xb4>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_TIM_MspPostInit+0xb4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001528:	2302      	movs	r3, #2
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4817      	ldr	r0, [pc, #92]	@ (8001590 <HAL_TIM_MspPostInit+0xb8>)
 8001534:	f000 fb8c 	bl	8001c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001538:	e022      	b.n	8001580 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <HAL_TIM_MspPostInit+0xbc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d11d      	bne.n	8001580 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <HAL_TIM_MspPostInit+0xb4>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	4a0f      	ldr	r2, [pc, #60]	@ (800158c <HAL_TIM_MspPostInit+0xb4>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6313      	str	r3, [r2, #48]	@ 0x30
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_TIM_MspPostInit+0xb4>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001560:	2320      	movs	r3, #32
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001570:	2303      	movs	r3, #3
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	@ (8001598 <HAL_TIM_MspPostInit+0xc0>)
 800157c:	f000 fb68 	bl	8001c50 <HAL_GPIO_Init>
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40000800 	.word	0x40000800
 800158c:	40023800 	.word	0x40023800
 8001590:	40020c00 	.word	0x40020c00
 8001594:	40014000 	.word	0x40014000
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_UART_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12c      	bne.n	8001618 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_UART_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_UART_MspInit+0x8c>)
 8001614:	f000 fb1c 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40004800 	.word	0x40004800
 8001624:	40023800 	.word	0x40023800
 8001628:	40020c00 	.word	0x40020c00

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f921 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SETUP_SW_Pin);
 800168e:	2002      	movs	r0, #2
 8001690:	f000 fcbc 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STATE_SW_Pin);
 800169c:	2004      	movs	r0, #4
 800169e:	f000 fcb5 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOOR_SW_Pin);
 80016aa:	2008      	movs	r0, #8
 80016ac:	f000 fcae 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016ba:	f001 fb27 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200001ec 	.word	0x200001ec

080016c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <TIM2_IRQHandler+0x10>)
 80016ce:	f001 fb1d 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000084 	.word	0x20000084

080016dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <TIM3_IRQHandler+0x10>)
 80016e2:	f001 fb13 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200000cc 	.word	0x200000cc

080016f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <USART3_IRQHandler+0x10>)
 80016f6:	f002 fa69 	bl	8003bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000234 	.word	0x20000234

08001704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEYPAD1_Pin);
 8001708:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800170c:	f000 fc7e 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD2_Pin);
 8001710:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001714:	f000 fc7a 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD3_Pin);
 8001718:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800171c:	f000 fc76 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD4_Pin);
 8001720:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001724:	f000 fc72 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM5_IRQHandler+0x10>)
 8001732:	f001 faeb 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000015c 	.word	0x2000015c

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f003 f97a 	bl	8004a68 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20030000 	.word	0x20030000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	200002d4 	.word	0x200002d4
 80017a8:	20000428 	.word	0x20000428

080017ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d4:	f7ff ffea 	bl	80017ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	@ (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f003 f939 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7fe fed5 	bl	80005b0 <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001808:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001814:	0800559c 	.word	0x0800559c
  ldr r2, =_sbss
 8001818:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800181c:	20000424 	.word	0x20000424

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f92b 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fd88 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f943 	bl	8001b12 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f90b 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000014 	.word	0x20000014
 80018c4:	20000010 	.word	0x20000010

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000014 	.word	0x20000014
 80018ec:	200002d8 	.word	0x200002d8

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200002d8 	.word	0x200002d8

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	@ (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	@ (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff8e 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff29 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad0:	f7ff ff3e 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff ff8e 	bl	80019fc <NVIC_EncodePriority>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff5d 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff31 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffa2 	bl	8001a64 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff feda 	bl	80018f0 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d008      	beq.n	8001b5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e052      	b.n	8001c02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0216 	bic.w	r2, r2, #22
 8001b6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <HAL_DMA_Abort+0x62>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0208 	bic.w	r2, r2, #8
 8001b9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bac:	e013      	b.n	8001bd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bae:	f7ff fe9f 	bl	80018f0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d90c      	bls.n	8001bd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e015      	b.n	8001c02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e4      	bne.n	8001bae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be8:	223f      	movs	r2, #63	@ 0x3f
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d004      	beq.n	8001c28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e00c      	b.n	8001c42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e177      	b.n	8001f5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8166 	bne.w	8001f56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d005      	beq.n	8001ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d130      	bne.n	8001d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d017      	beq.n	8001d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d123      	bne.n	8001d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	69b9      	ldr	r1, [r7, #24]
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80c0 	beq.w	8001f56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b66      	ldr	r3, [pc, #408]	@ (8001f74 <HAL_GPIO_Init+0x324>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	4a65      	ldr	r2, [pc, #404]	@ (8001f74 <HAL_GPIO_Init+0x324>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <HAL_GPIO_Init+0x324>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df2:	4a61      	ldr	r2, [pc, #388]	@ (8001f78 <HAL_GPIO_Init+0x328>)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	@ (8001f7c <HAL_GPIO_Init+0x32c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d037      	beq.n	8001e8e <HAL_GPIO_Init+0x23e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a57      	ldr	r2, [pc, #348]	@ (8001f80 <HAL_GPIO_Init+0x330>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d031      	beq.n	8001e8a <HAL_GPIO_Init+0x23a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a56      	ldr	r2, [pc, #344]	@ (8001f84 <HAL_GPIO_Init+0x334>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d02b      	beq.n	8001e86 <HAL_GPIO_Init+0x236>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a55      	ldr	r2, [pc, #340]	@ (8001f88 <HAL_GPIO_Init+0x338>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x232>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a54      	ldr	r2, [pc, #336]	@ (8001f8c <HAL_GPIO_Init+0x33c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x22e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a53      	ldr	r2, [pc, #332]	@ (8001f90 <HAL_GPIO_Init+0x340>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x22a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a52      	ldr	r2, [pc, #328]	@ (8001f94 <HAL_GPIO_Init+0x344>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x226>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a51      	ldr	r2, [pc, #324]	@ (8001f98 <HAL_GPIO_Init+0x348>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x222>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a50      	ldr	r2, [pc, #320]	@ (8001f9c <HAL_GPIO_Init+0x34c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x21e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa0 <HAL_GPIO_Init+0x350>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x21a>
 8001e66:	2309      	movs	r3, #9
 8001e68:	e012      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	e010      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e6e:	2308      	movs	r3, #8
 8001e70:	e00e      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e72:	2307      	movs	r3, #7
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e76:	2306      	movs	r3, #6
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x240>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea0:	4935      	ldr	r1, [pc, #212]	@ (8001f78 <HAL_GPIO_Init+0x328>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a34      	ldr	r2, [pc, #208]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a29      	ldr	r2, [pc, #164]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f50:	4a14      	ldr	r2, [pc, #80]	@ (8001fa4 <HAL_GPIO_Init+0x354>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f ae84 	bls.w	8001c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	@ 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40021c00 	.word	0x40021c00
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40022400 	.word	0x40022400
 8001fa4:	40013c00 	.word	0x40013c00

08001fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e001      	b.n	8001fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff4:	e003      	b.n	8001ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	619a      	str	r2, [r3, #24]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff6e 	bl	8000f0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013c00 	.word	0x40013c00

0800203c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e267      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d075      	beq.n	8002146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800205a:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d00c      	beq.n	8002080 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b85      	ldr	r3, [pc, #532]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800206e:	2b08      	cmp	r3, #8
 8002070:	d112      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002072:	4b82      	ldr	r3, [pc, #520]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4b7e      	ldr	r3, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05b      	beq.n	8002144 <HAL_RCC_OscConfig+0x108>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d157      	bne.n	8002144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e242      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x74>
 80020a2:	4b76      	ldr	r3, [pc, #472]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a75      	ldr	r2, [pc, #468]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b70      	ldr	r3, [pc, #448]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6f      	ldr	r2, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6d      	ldr	r3, [pc, #436]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6c      	ldr	r2, [pc, #432]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xb0>
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a68      	ldr	r2, [pc, #416]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a65      	ldr	r2, [pc, #404]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fbfc 	bl	80018f0 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fbf8 	bl	80018f0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e207      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b5b      	ldr	r3, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xc0>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fbe8 	bl	80018f0 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fbe4 	bl	80018f0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1f3      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b51      	ldr	r3, [pc, #324]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0xe8>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b44      	ldr	r3, [pc, #272]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1c7      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4937      	ldr	r1, [pc, #220]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x244>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb9d 	bl	80018f0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb99 	bl	80018f0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a8      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4925      	ldr	r1, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCC_OscConfig+0x244>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fb7c 	bl	80018f0 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff fb78 	bl	80018f0 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e187      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d036      	beq.n	8002294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_RCC_OscConfig+0x248>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7ff fb5c 	bl	80018f0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7ff fb58 	bl	80018f0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e167      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_OscConfig+0x240>)
 8002250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x200>
 800225a:	e01b      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_RCC_OscConfig+0x248>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7ff fb45 	bl	80018f0 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	e00e      	b.n	8002288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff fb41 	bl	80018f0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d907      	bls.n	8002288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e150      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	42470000 	.word	0x42470000
 8002284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b88      	ldr	r3, [pc, #544]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ea      	bne.n	800226a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8097 	beq.w	80023d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b81      	ldr	r3, [pc, #516]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b7d      	ldr	r3, [pc, #500]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a7c      	ldr	r2, [pc, #496]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b7a      	ldr	r3, [pc, #488]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b77      	ldr	r3, [pc, #476]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b74      	ldr	r3, [pc, #464]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a73      	ldr	r2, [pc, #460]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7ff fb01 	bl	80018f0 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7ff fafd 	bl	80018f0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e10c      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_OscConfig+0x474>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x2ea>
 8002318:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	4a63      	ldr	r2, [pc, #396]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	@ 0x70
 8002324:	e01c      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x30c>
 800232e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	4a5e      	ldr	r2, [pc, #376]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	@ 0x70
 800233a:	4b5c      	ldr	r3, [pc, #368]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	@ 0x70
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0x324>
 8002348:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	@ 0x70
 8002354:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	4a54      	ldr	r2, [pc, #336]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff fac2 	bl	80018f0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7ff fabe 	bl	80018f0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0cb      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	4b49      	ldr	r3, [pc, #292]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ee      	beq.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7ff faac 	bl	80018f0 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7ff faa8 	bl	80018f0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0b5      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ee      	bne.n	800239c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	4a38      	ldr	r2, [pc, #224]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a1 	beq.w	800251c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023da:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d05c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d141      	bne.n	8002472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa7c 	bl	80018f0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fa78 	bl	80018f0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e087      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fa51 	bl	80018f0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff fa4d 	bl	80018f0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e05c      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x416>
 8002470:	e054      	b.n	800251c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_OscConfig+0x478>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fa3a 	bl	80018f0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fa36 	bl	80018f0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e045      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_OscConfig+0x470>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x444>
 800249e:	e03d      	b.n	800251c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e038      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d028      	beq.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d121      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d11a      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d111      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cc      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b68      	ldr	r3, [pc, #416]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d90c      	bls.n	8002568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b65      	ldr	r3, [pc, #404]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a58      	ldr	r2, [pc, #352]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a52      	ldr	r2, [pc, #328]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d044      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d119      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e067      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4934      	ldr	r1, [pc, #208]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7ff f968 	bl	80018f0 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff f964 	bl	80018f0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20c      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f8c8 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08005540 	.word	0x08005540
 80026f0:	2000000c 	.word	0x2000000c
 80026f4:	20000010 	.word	0x20000010

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026fc:	b090      	sub	sp, #64	@ 0x40
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x40>
 800271c:	2b08      	cmp	r3, #8
 800271e:	f200 80a1 	bhi.w	8002864 <HAL_RCC_GetSysClockFreq+0x16c>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002726:	2b04      	cmp	r3, #4
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x3a>
 800272a:	e09b      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b53      	ldr	r3, [pc, #332]	@ (800287c <HAL_RCC_GetSysClockFreq+0x184>)
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002730:	e09b      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b53      	ldr	r3, [pc, #332]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x188>)
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002736:	e098      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002740:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b4a      	ldr	r3, [pc, #296]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	627a      	str	r2, [r7, #36]	@ 0x24
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002760:	2100      	movs	r1, #0
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x188>)
 8002764:	fb03 f201 	mul.w	r2, r3, r1
 8002768:	2300      	movs	r3, #0
 800276a:	fb00 f303 	mul.w	r3, r0, r3
 800276e:	4413      	add	r3, r2
 8002770:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x188>)
 8002772:	fba0 1202 	umull	r1, r2, r0, r2
 8002776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002778:	460a      	mov	r2, r1
 800277a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800277c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800277e:	4413      	add	r3, r2
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002784:	2200      	movs	r2, #0
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	61fa      	str	r2, [r7, #28]
 800278a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002792:	f7fd fd95 	bl	80002c0 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4613      	mov	r3, r2
 800279c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800279e:	e053      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a0:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	2200      	movs	r2, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	617a      	str	r2, [r7, #20]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027b2:	f04f 0b00 	mov.w	fp, #0
 80027b6:	4652      	mov	r2, sl
 80027b8:	465b      	mov	r3, fp
 80027ba:	f04f 0000 	mov.w	r0, #0
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c8:	0150      	lsls	r0, r2, #5
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	ebb2 080a 	subs.w	r8, r2, sl
 80027d2:	eb63 090b 	sbc.w	r9, r3, fp
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ea:	ebb2 0408 	subs.w	r4, r2, r8
 80027ee:	eb63 0509 	sbc.w	r5, r3, r9
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	00eb      	lsls	r3, r5, #3
 80027fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002800:	00e2      	lsls	r2, r4, #3
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	eb14 030a 	adds.w	r3, r4, sl
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	eb45 030b 	adc.w	r3, r5, fp
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281e:	4629      	mov	r1, r5
 8002820:	028b      	lsls	r3, r1, #10
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002828:	4621      	mov	r1, r4
 800282a:	028a      	lsls	r2, r1, #10
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002832:	2200      	movs	r2, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	60fa      	str	r2, [r7, #12]
 8002838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283c:	f7fd fd40 	bl	80002c0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x180>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetSysClockFreq+0x184>)
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800286c:	4618      	mov	r0, r3
 800286e:	3740      	adds	r7, #64	@ 0x40
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	00f42400 	.word	0x00f42400
 8002880:	017d7840 	.word	0x017d7840

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000000c 	.word	0x2000000c

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff0 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08005550 	.word	0x08005550

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffdc 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0b5b      	lsrs	r3, r3, #13
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08005550 	.word	0x08005550

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fd52 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fc90 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e04e      	b.n	8002a42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <HAL_TIM_Base_Start_IT+0xc4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ce:	d01d      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <HAL_TIM_Base_Start_IT+0xc8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_TIM_Base_Start_IT+0xcc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xd0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xd4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xd8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x80>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a18      	ldr	r2, [pc, #96]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d111      	bne.n	8002a30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d010      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2e:	e007      	b.n	8002a40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40010400 	.word	0x40010400
 8002a64:	40014000 	.word	0x40014000
 8002a68:	40001800 	.word	0x40001800

08002a6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <HAL_TIM_Base_Stop_IT+0x48>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_Base_Stop_IT+0x48>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e041      	b.n	8002b60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f839 	bl	8002b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f000 fba1 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x24>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e022      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d109      	bne.n	8002bba <HAL_TIM_PWM_Start+0x3e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e015      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start+0x58>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e008      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07c      	b.n	8002ce8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x82>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bfc:	e013      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x92>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c0c:	e00b      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c1c:	e003      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fe04 	bl	800383c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf0 <HAL_TIM_PWM_Start+0x174>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_PWM_Start+0xcc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <HAL_TIM_PWM_Start+0x178>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_TIM_PWM_Start+0xd0>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_PWM_Start+0xd2>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a22      	ldr	r2, [pc, #136]	@ (8002cf0 <HAL_TIM_PWM_Start+0x174>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d01d      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <HAL_TIM_PWM_Start+0x17c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <HAL_TIM_PWM_Start+0x180>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <HAL_TIM_PWM_Start+0x184>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <HAL_TIM_PWM_Start+0x178>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a18      	ldr	r2, [pc, #96]	@ (8002d04 <HAL_TIM_PWM_Start+0x188>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <HAL_TIM_PWM_Start+0x18c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d111      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d010      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd4:	e007      	b.n	8002ce6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40001800 	.word	0x40001800

08002d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0202 	mvn.w	r2, #2
 8002d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa5b 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa4d 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa5e 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0204 	mvn.w	r2, #4
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa35 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa27 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa38 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d020      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0208 	mvn.w	r2, #8
 8002dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa0f 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa01 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fa12 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d020      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0210 	mvn.w	r2, #16
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9e9 	bl	8003212 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9db 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f9ec 	bl	8003226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0201 	mvn.w	r2, #1
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd ff30 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fd7c 	bl	8003994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f9bd 	bl	800323a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0220 	mvn.w	r2, #32
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fd4e 	bl	8003980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0ae      	b.n	8003068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	f200 809f 	bhi.w	8003058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08003059 	.word	0x08003059
 8002f28:	08003059 	.word	0x08003059
 8002f2c:	08003059 	.word	0x08003059
 8002f30:	08002f95 	.word	0x08002f95
 8002f34:	08003059 	.word	0x08003059
 8002f38:	08003059 	.word	0x08003059
 8002f3c:	08003059 	.word	0x08003059
 8002f40:	08002fd7 	.word	0x08002fd7
 8002f44:	08003059 	.word	0x08003059
 8002f48:	08003059 	.word	0x08003059
 8002f4c:	08003059 	.word	0x08003059
 8002f50:	08003017 	.word	0x08003017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa24 	bl	80033a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	619a      	str	r2, [r3, #24]
      break;
 8002f92:	e064      	b.n	800305e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fa74 	bl	8003488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
      break;
 8002fd4:	e043      	b.n	800305e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fac9 	bl	8003574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0204 	bic.w	r2, r2, #4
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
      break;
 8003014:	e023      	b.n	800305e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fb1d 	bl	800365c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	61da      	str	r2, [r3, #28]
      break;
 8003056:	e002      	b.n	800305e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
      break;
 800305c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_TIM_ConfigClockSource+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e0b4      	b.n	80031f6 <HAL_TIM_ConfigClockSource+0x186>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c4:	d03e      	beq.n	8003144 <HAL_TIM_ConfigClockSource+0xd4>
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	f200 8087 	bhi.w	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d2:	f000 8086 	beq.w	80031e2 <HAL_TIM_ConfigClockSource+0x172>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030da:	d87f      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b70      	cmp	r3, #112	@ 0x70
 80030de:	d01a      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0xa6>
 80030e0:	2b70      	cmp	r3, #112	@ 0x70
 80030e2:	d87b      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b60      	cmp	r3, #96	@ 0x60
 80030e6:	d050      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x11a>
 80030e8:	2b60      	cmp	r3, #96	@ 0x60
 80030ea:	d877      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b50      	cmp	r3, #80	@ 0x50
 80030ee:	d03c      	beq.n	800316a <HAL_TIM_ConfigClockSource+0xfa>
 80030f0:	2b50      	cmp	r3, #80	@ 0x50
 80030f2:	d873      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b40      	cmp	r3, #64	@ 0x40
 80030f6:	d058      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x13a>
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d86f      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b30      	cmp	r3, #48	@ 0x30
 80030fe:	d064      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003100:	2b30      	cmp	r3, #48	@ 0x30
 8003102:	d86b      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d060      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	2b20      	cmp	r3, #32
 800310a:	d867      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d05c      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	2b10      	cmp	r3, #16
 8003112:	d05a      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x15a>
 8003114:	e062      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003126:	f000 fb69 	bl	80037fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	609a      	str	r2, [r3, #8]
      break;
 8003142:	e04f      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003154:	f000 fb52 	bl	80037fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003166:	609a      	str	r2, [r3, #8]
      break;
 8003168:	e03c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003176:	461a      	mov	r2, r3
 8003178:	f000 fac6 	bl	8003708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2150      	movs	r1, #80	@ 0x50
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fb1f 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 8003188:	e02c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003196:	461a      	mov	r2, r3
 8003198:	f000 fae5 	bl	8003766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2160      	movs	r1, #96	@ 0x60
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fb0f 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 80031a8:	e01c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 faa6 	bl	8003708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2140      	movs	r1, #64	@ 0x40
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 faff 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 80031c8:	e00c      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 faf6 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 80031da:	e003      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	e000      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a46      	ldr	r2, [pc, #280]	@ (800337c <TIM_Base_SetConfig+0x12c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326e:	d00f      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a43      	ldr	r2, [pc, #268]	@ (8003380 <TIM_Base_SetConfig+0x130>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a42      	ldr	r2, [pc, #264]	@ (8003384 <TIM_Base_SetConfig+0x134>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a41      	ldr	r2, [pc, #260]	@ (8003388 <TIM_Base_SetConfig+0x138>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a40      	ldr	r2, [pc, #256]	@ (800338c <TIM_Base_SetConfig+0x13c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a35      	ldr	r2, [pc, #212]	@ (800337c <TIM_Base_SetConfig+0x12c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02b      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b0:	d027      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a32      	ldr	r2, [pc, #200]	@ (8003380 <TIM_Base_SetConfig+0x130>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d023      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a31      	ldr	r2, [pc, #196]	@ (8003384 <TIM_Base_SetConfig+0x134>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a30      	ldr	r2, [pc, #192]	@ (8003388 <TIM_Base_SetConfig+0x138>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01b      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2f      	ldr	r2, [pc, #188]	@ (800338c <TIM_Base_SetConfig+0x13c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d017      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003390 <TIM_Base_SetConfig+0x140>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003394 <TIM_Base_SetConfig+0x144>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00f      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003398 <TIM_Base_SetConfig+0x148>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2b      	ldr	r2, [pc, #172]	@ (800339c <TIM_Base_SetConfig+0x14c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2a      	ldr	r2, [pc, #168]	@ (80033a0 <TIM_Base_SetConfig+0x150>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a29      	ldr	r2, [pc, #164]	@ (80033a4 <TIM_Base_SetConfig+0x154>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a10      	ldr	r2, [pc, #64]	@ (800337c <TIM_Base_SetConfig+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0xf8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a12      	ldr	r2, [pc, #72]	@ (800338c <TIM_Base_SetConfig+0x13c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]
  }
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010000 	.word	0x40010000
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40010400 	.word	0x40010400
 8003390:	40014000 	.word	0x40014000
 8003394:	40014400 	.word	0x40014400
 8003398:	40014800 	.word	0x40014800
 800339c:	40001800 	.word	0x40001800
 80033a0:	40001c00 	.word	0x40001c00
 80033a4:	40002000 	.word	0x40002000

080033a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0201 	bic.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 0302 	bic.w	r3, r3, #2
 80033f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a20      	ldr	r2, [pc, #128]	@ (8003480 <TIM_OC1_SetConfig+0xd8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC1_SetConfig+0x64>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <TIM_OC1_SetConfig+0xdc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10c      	bne.n	8003426 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0308 	bic.w	r3, r3, #8
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <TIM_OC1_SetConfig+0xd8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_OC1_SetConfig+0x8e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <TIM_OC1_SetConfig+0xdc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d111      	bne.n	800345a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800343c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40010000 	.word	0x40010000
 8003484:	40010400 	.word	0x40010400

08003488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f023 0210 	bic.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0320 	bic.w	r3, r3, #32
 80034d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a22      	ldr	r2, [pc, #136]	@ (800356c <TIM_OC2_SetConfig+0xe4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_OC2_SetConfig+0x68>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a21      	ldr	r2, [pc, #132]	@ (8003570 <TIM_OC2_SetConfig+0xe8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10d      	bne.n	800350c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800350a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a17      	ldr	r2, [pc, #92]	@ (800356c <TIM_OC2_SetConfig+0xe4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC2_SetConfig+0x94>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a16      	ldr	r2, [pc, #88]	@ (8003570 <TIM_OC2_SetConfig+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d113      	bne.n	8003544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40010000 	.word	0x40010000
 8003570:	40010400 	.word	0x40010400

08003574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a21      	ldr	r2, [pc, #132]	@ (8003654 <TIM_OC3_SetConfig+0xe0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_OC3_SetConfig+0x66>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a20      	ldr	r2, [pc, #128]	@ (8003658 <TIM_OC3_SetConfig+0xe4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10d      	bne.n	80035f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <TIM_OC3_SetConfig+0xe0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC3_SetConfig+0x92>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <TIM_OC3_SetConfig+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d113      	bne.n	800362e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40010000 	.word	0x40010000
 8003658:	40010400 	.word	0x40010400

0800365c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	031b      	lsls	r3, r3, #12
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <TIM_OC4_SetConfig+0xa4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_OC4_SetConfig+0x68>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a11      	ldr	r2, [pc, #68]	@ (8003704 <TIM_OC4_SetConfig+0xa8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d109      	bne.n	80036d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40010400 	.word	0x40010400

08003708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 030a 	bic.w	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003766:	b480      	push	{r7}
 8003768:	b087      	sub	sp, #28
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0210 	bic.w	r2, r3, #16
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	031b      	lsls	r3, r3, #12
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f043 0307 	orr.w	r3, r3, #7
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	431a      	orrs	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2201      	movs	r2, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	43db      	mvns	r3, r3
 800385e:	401a      	ands	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	fa01 f303 	lsl.w	r3, r1, r3
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800389c:	2302      	movs	r3, #2
 800389e:	e05a      	b.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d01d      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1a      	ldr	r2, [pc, #104]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a18      	ldr	r2, [pc, #96]	@ (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a15      	ldr	r2, [pc, #84]	@ (800397c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10c      	bne.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4313      	orrs	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40010400 	.word	0x40010400
 8003978:	40014000 	.word	0x40014000
 800397c:	40001800 	.word	0x40001800

08003980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e042      	b.n	8003a40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fde4 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	@ 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fd9f 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d175      	bne.n	8003b54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Transmit+0x2c>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e06e      	b.n	8003b56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	@ 0x21
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a86:	f7fd ff33 	bl	80018f0 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003abc:	e02e      	b.n	8003b1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb3b 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e03a      	b.n	8003b56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1cb      	bne.n	8003abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	@ 0x40
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fb07 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e006      	b.n	8003b56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d121      	bne.n	8003bbc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Transmit_IT+0x26>
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e01a      	b.n	8003bbe <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2221      	movs	r2, #33	@ 0x21
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bb6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b0ba      	sub	sp, #232	@ 0xe8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_UART_IRQHandler+0x66>
 8003c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fbc2 	bl	80043b4 <UART_Receive_IT>
      return;
 8003c30:	e25b      	b.n	80040ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80de 	beq.w	8003df8 <HAL_UART_IRQHandler+0x22c>
 8003c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80d1 	beq.w	8003df8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_UART_IRQHandler+0xae>
 8003c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f043 0201 	orr.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_UART_IRQHandler+0xd2>
 8003c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f043 0202 	orr.w	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_UART_IRQHandler+0xf6>
 8003caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f043 0204 	orr.w	r2, r3, #4
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d011      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x126>
 8003cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	f043 0208 	orr.w	r2, r3, #8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 81f2 	beq.w	80040e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_UART_IRQHandler+0x14e>
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fb4d 	bl	80043b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d24:	2b40      	cmp	r3, #64	@ 0x40
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_UART_IRQHandler+0x17a>
 8003d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04f      	beq.n	8003de6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fa55 	bl	80041f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d56:	2b40      	cmp	r3, #64	@ 0x40
 8003d58:	d141      	bne.n	8003dde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1d9      	bne.n	8003d5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d013      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fac <HAL_UART_IRQHandler+0x3e0>)
 8003db4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd ff25 	bl	8001c0a <HAL_DMA_Abort_IT>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e00e      	b.n	8003df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f99e 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e00a      	b.n	8003df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f99a 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	e006      	b.n	8003df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f996 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003df2:	e175      	b.n	80040e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	bf00      	nop
    return;
 8003df6:	e173      	b.n	80040e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	f040 814f 	bne.w	80040a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8148 	beq.w	80040a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8141 	beq.w	80040a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3e:	2b40      	cmp	r3, #64	@ 0x40
 8003e40:	f040 80b6 	bne.w	8003fb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8145 	beq.w	80040e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e62:	429a      	cmp	r2, r3
 8003e64:	f080 813e 	bcs.w	80040e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7a:	f000 8088 	beq.w	8003f8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1d9      	bne.n	8003e7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e1      	bne.n	8003eca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e3      	bne.n	8003f06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f5e:	f023 0310 	bic.w	r3, r3, #16
 8003f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e3      	bne.n	8003f4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd fdce 	bl	8001b2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8c1 	bl	800412c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003faa:	e09b      	b.n	80040e4 <HAL_UART_IRQHandler+0x518>
 8003fac:	080042bd 	.word	0x080042bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 808e 	beq.w	80040e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8089 	beq.w	80040e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ffa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ffc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e3      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	623b      	str	r3, [r7, #32]
   return(result);
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004032:	633a      	str	r2, [r7, #48]	@ 0x30
 8004034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e3      	bne.n	800400e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	60fb      	str	r3, [r7, #12]
   return(result);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0310 	bic.w	r3, r3, #16
 800406a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004078:	61fa      	str	r2, [r7, #28]
 800407a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	69b9      	ldr	r1, [r7, #24]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	617b      	str	r3, [r7, #20]
   return(result);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e3      	bne.n	8004054 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004092:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f847 	bl	800412c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800409e:	e023      	b.n	80040e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_UART_IRQHandler+0x4f4>
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f913 	bl	80042e4 <UART_Transmit_IT>
    return;
 80040be:	e014      	b.n	80040ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <HAL_UART_IRQHandler+0x51e>
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f953 	bl	8004384 <UART_EndTransmit_IT>
    return;
 80040de:	e004      	b.n	80040ea <HAL_UART_IRQHandler+0x51e>
    return;
 80040e0:	bf00      	nop
 80040e2:	e002      	b.n	80040ea <HAL_UART_IRQHandler+0x51e>
      return;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <HAL_UART_IRQHandler+0x51e>
      return;
 80040e8:	bf00      	nop
  }
}
 80040ea:	37e8      	adds	r7, #232	@ 0xe8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004154:	e03b      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d037      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415e:	f7fd fbc7 	bl	80018f0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <UART_WaitOnFlagUntilTimeout+0x30>
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e03a      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d023      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b80      	cmp	r3, #128	@ 0x80
 800418a:	d020      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b40      	cmp	r3, #64	@ 0x40
 8004190:	d01d      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d116      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f81d 	bl	80041f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2208      	movs	r2, #8
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00f      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0b4      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b095      	sub	sp, #84	@ 0x54
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800421e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	61fb      	str	r3, [r7, #28]
   return(result);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	2b01      	cmp	r3, #1
 800426c:	d119      	bne.n	80042a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60bb      	str	r3, [r7, #8]
   return(result);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800428e:	61ba      	str	r2, [r7, #24]
 8004290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042b0:	bf00      	nop
 80042b2:	3754      	adds	r7, #84	@ 0x54
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff1e 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b21      	cmp	r3, #33	@ 0x21
 80042f6:	d13e      	bne.n	8004376 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d114      	bne.n	800432c <UART_Transmit_IT+0x48>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d110      	bne.n	800432c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	1c9a      	adds	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	621a      	str	r2, [r3, #32]
 800432a:	e008      	b.n	800433e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	1c59      	adds	r1, r3, #1
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6211      	str	r1, [r2, #32]
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4619      	mov	r1, r3
 800434c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004360:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004370:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fea3 	bl	80040f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	@ 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b22      	cmp	r3, #34	@ 0x22
 80043c6:	f040 80ae 	bne.w	8004526 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d2:	d117      	bne.n	8004404 <UART_Receive_IT+0x50>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d113      	bne.n	8004404 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	1c9a      	adds	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	629a      	str	r2, [r3, #40]	@ 0x28
 8004402:	e026      	b.n	8004452 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004416:	d007      	beq.n	8004428 <UART_Receive_IT+0x74>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <UART_Receive_IT+0x82>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	e008      	b.n	8004448 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004442:	b2da      	uxtb	r2, r3
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4619      	mov	r1, r3
 8004460:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004462:	2b00      	cmp	r3, #0
 8004464:	d15d      	bne.n	8004522 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0220 	bic.w	r2, r2, #32
 8004474:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004484:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d135      	bne.n	8004518 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	613b      	str	r3, [r7, #16]
   return(result);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	623a      	str	r2, [r7, #32]
 80044d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	69f9      	ldr	r1, [r7, #28]
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e5      	bne.n	80044b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d10a      	bne.n	800450a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fe0b 	bl	800412c <HAL_UARTEx_RxEventCallback>
 8004516:	e002      	b.n	800451e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fdf3 	bl	8004104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e002      	b.n	8004528 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3730      	adds	r7, #48	@ 0x30
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0c0      	sub	sp, #256	@ 0x100
 8004536:	af00      	add	r7, sp, #0
 8004538:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	ea40 0301 	orr.w	r3, r0, r1
 8004558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	431a      	orrs	r2, r3
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004588:	f021 010c 	bic.w	r1, r1, #12
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004596:	430b      	orrs	r3, r1
 8004598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	ea40 0301 	orr.w	r3, r0, r1
 80045b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b8f      	ldr	r3, [pc, #572]	@ (80047fc <UART_SetConfig+0x2cc>)
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d005      	beq.n	80045d0 <UART_SetConfig+0xa0>
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004800 <UART_SetConfig+0x2d0>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d104      	bne.n	80045da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7fe f978 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 80045d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045d8:	e003      	b.n	80045e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045da:	f7fe f95f 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 80045de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ec:	f040 810c 	bne.w	8004808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	1891      	adds	r1, r2, r2
 8004608:	65b9      	str	r1, [r7, #88]	@ 0x58
 800460a:	415b      	adcs	r3, r3
 800460c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004612:	4621      	mov	r1, r4
 8004614:	eb12 0801 	adds.w	r8, r2, r1
 8004618:	4629      	mov	r1, r5
 800461a:	eb43 0901 	adc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004632:	4690      	mov	r8, r2
 8004634:	4699      	mov	r9, r3
 8004636:	4623      	mov	r3, r4
 8004638:	eb18 0303 	adds.w	r3, r8, r3
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004640:	462b      	mov	r3, r5
 8004642:	eb49 0303 	adc.w	r3, r9, r3
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004656:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800465a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800465e:	460b      	mov	r3, r1
 8004660:	18db      	adds	r3, r3, r3
 8004662:	653b      	str	r3, [r7, #80]	@ 0x50
 8004664:	4613      	mov	r3, r2
 8004666:	eb42 0303 	adc.w	r3, r2, r3
 800466a:	657b      	str	r3, [r7, #84]	@ 0x54
 800466c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004674:	f7fb fe24 	bl	80002c0 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4b61      	ldr	r3, [pc, #388]	@ (8004804 <UART_SetConfig+0x2d4>)
 800467e:	fba3 2302 	umull	r2, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	011c      	lsls	r4, r3, #4
 8004686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004690:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	1891      	adds	r1, r2, r2
 800469e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046a0:	415b      	adcs	r3, r3
 80046a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046a8:	4641      	mov	r1, r8
 80046aa:	eb12 0a01 	adds.w	sl, r2, r1
 80046ae:	4649      	mov	r1, r9
 80046b0:	eb43 0b01 	adc.w	fp, r3, r1
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c8:	4692      	mov	sl, r2
 80046ca:	469b      	mov	fp, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	eb1a 0303 	adds.w	r3, sl, r3
 80046d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d6:	464b      	mov	r3, r9
 80046d8:	eb4b 0303 	adc.w	r3, fp, r3
 80046dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046f4:	460b      	mov	r3, r1
 80046f6:	18db      	adds	r3, r3, r3
 80046f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046fa:	4613      	mov	r3, r2
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	647b      	str	r3, [r7, #68]	@ 0x44
 8004702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800470a:	f7fb fdd9 	bl	80002c0 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4611      	mov	r1, r2
 8004714:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <UART_SetConfig+0x2d4>)
 8004716:	fba3 2301 	umull	r2, r3, r3, r1
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2264      	movs	r2, #100	@ 0x64
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	1acb      	subs	r3, r1, r3
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800472a:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <UART_SetConfig+0x2d4>)
 800472c:	fba3 2302 	umull	r2, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004738:	441c      	add	r4, r3
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004744:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004754:	415b      	adcs	r3, r3
 8004756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800475c:	4641      	mov	r1, r8
 800475e:	1851      	adds	r1, r2, r1
 8004760:	6339      	str	r1, [r7, #48]	@ 0x30
 8004762:	4649      	mov	r1, r9
 8004764:	414b      	adcs	r3, r1
 8004766:	637b      	str	r3, [r7, #52]	@ 0x34
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004774:	4659      	mov	r1, fp
 8004776:	00cb      	lsls	r3, r1, #3
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477e:	4651      	mov	r1, sl
 8004780:	00ca      	lsls	r2, r1, #3
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	4603      	mov	r3, r0
 8004788:	4642      	mov	r2, r8
 800478a:	189b      	adds	r3, r3, r2
 800478c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004790:	464b      	mov	r3, r9
 8004792:	460a      	mov	r2, r1
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047b0:	460b      	mov	r3, r1
 80047b2:	18db      	adds	r3, r3, r3
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b6:	4613      	mov	r3, r2
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047c6:	f7fb fd7b 	bl	80002c0 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <UART_SetConfig+0x2d4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	@ 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	3332      	adds	r3, #50	@ 0x32
 80047e2:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <UART_SetConfig+0x2d4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 0207 	and.w	r2, r3, #7
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4422      	add	r2, r4
 80047f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f8:	e106      	b.n	8004a08 <UART_SetConfig+0x4d8>
 80047fa:	bf00      	nop
 80047fc:	40011000 	.word	0x40011000
 8004800:	40011400 	.word	0x40011400
 8004804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004812:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800481a:	4642      	mov	r2, r8
 800481c:	464b      	mov	r3, r9
 800481e:	1891      	adds	r1, r2, r2
 8004820:	6239      	str	r1, [r7, #32]
 8004822:	415b      	adcs	r3, r3
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
 8004826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482a:	4641      	mov	r1, r8
 800482c:	1854      	adds	r4, r2, r1
 800482e:	4649      	mov	r1, r9
 8004830:	eb43 0501 	adc.w	r5, r3, r1
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	00eb      	lsls	r3, r5, #3
 800483e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004842:	00e2      	lsls	r2, r4, #3
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	4643      	mov	r3, r8
 800484a:	18e3      	adds	r3, r4, r3
 800484c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004850:	464b      	mov	r3, r9
 8004852:	eb45 0303 	adc.w	r3, r5, r3
 8004856:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004866:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004876:	4629      	mov	r1, r5
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4621      	mov	r1, r4
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004888:	f7fb fd1a 	bl	80002c0 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b60      	ldr	r3, [pc, #384]	@ (8004a14 <UART_SetConfig+0x4e4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	61b9      	str	r1, [r7, #24]
 80048b4:	415b      	adcs	r3, r3
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048bc:	4641      	mov	r1, r8
 80048be:	1851      	adds	r1, r2, r1
 80048c0:	6139      	str	r1, [r7, #16]
 80048c2:	4649      	mov	r1, r9
 80048c4:	414b      	adcs	r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	00cb      	lsls	r3, r1, #3
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048de:	4651      	mov	r1, sl
 80048e0:	00ca      	lsls	r2, r1, #3
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	4642      	mov	r2, r8
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048f0:	464b      	mov	r3, r9
 80048f2:	460a      	mov	r2, r1
 80048f4:	eb42 0303 	adc.w	r3, r2, r3
 80048f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004906:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004914:	4649      	mov	r1, r9
 8004916:	008b      	lsls	r3, r1, #2
 8004918:	4641      	mov	r1, r8
 800491a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491e:	4641      	mov	r1, r8
 8004920:	008a      	lsls	r2, r1, #2
 8004922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004926:	f7fb fccb 	bl	80002c0 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4611      	mov	r1, r2
 8004930:	4b38      	ldr	r3, [pc, #224]	@ (8004a14 <UART_SetConfig+0x4e4>)
 8004932:	fba3 2301 	umull	r2, r3, r3, r1
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2264      	movs	r2, #100	@ 0x64
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	1acb      	subs	r3, r1, r3
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	3332      	adds	r3, #50	@ 0x32
 8004944:	4a33      	ldr	r2, [pc, #204]	@ (8004a14 <UART_SetConfig+0x4e4>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004950:	441c      	add	r4, r3
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	673b      	str	r3, [r7, #112]	@ 0x70
 800495a:	677a      	str	r2, [r7, #116]	@ 0x74
 800495c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	415b      	adcs	r3, r3
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049a2:	464b      	mov	r3, r9
 80049a4:	460a      	mov	r2, r1
 80049a6:	eb42 0303 	adc.w	r3, r2, r3
 80049aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80049b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049c4:	4649      	mov	r1, r9
 80049c6:	008b      	lsls	r3, r1, #2
 80049c8:	4641      	mov	r1, r8
 80049ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ce:	4641      	mov	r1, r8
 80049d0:	008a      	lsls	r2, r1, #2
 80049d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049d6:	f7fb fc73 	bl	80002c0 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <UART_SetConfig+0x4e4>)
 80049e0:	fba3 1302 	umull	r1, r3, r3, r2
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	2164      	movs	r1, #100	@ 0x64
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	3332      	adds	r3, #50	@ 0x32
 80049f2:	4a08      	ldr	r2, [pc, #32]	@ (8004a14 <UART_SetConfig+0x4e4>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4422      	add	r2, r4
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a14:	51eb851f 	.word	0x51eb851f

08004a18 <siprintf>:
 8004a18:	b40e      	push	{r1, r2, r3}
 8004a1a:	b500      	push	{lr}
 8004a1c:	b09c      	sub	sp, #112	@ 0x70
 8004a1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a20:	9002      	str	r0, [sp, #8]
 8004a22:	9006      	str	r0, [sp, #24]
 8004a24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a28:	4809      	ldr	r0, [pc, #36]	@ (8004a50 <siprintf+0x38>)
 8004a2a:	9107      	str	r1, [sp, #28]
 8004a2c:	9104      	str	r1, [sp, #16]
 8004a2e:	4909      	ldr	r1, [pc, #36]	@ (8004a54 <siprintf+0x3c>)
 8004a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a34:	9105      	str	r1, [sp, #20]
 8004a36:	6800      	ldr	r0, [r0, #0]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	a902      	add	r1, sp, #8
 8004a3c:	f000 f99c 	bl	8004d78 <_svfiprintf_r>
 8004a40:	9b02      	ldr	r3, [sp, #8]
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	b01c      	add	sp, #112	@ 0x70
 8004a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a4c:	b003      	add	sp, #12
 8004a4e:	4770      	bx	lr
 8004a50:	20000018 	.word	0x20000018
 8004a54:	ffff0208 	.word	0xffff0208

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <__errno>:
 8004a68:	4b01      	ldr	r3, [pc, #4]	@ (8004a70 <__errno+0x8>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000018 	.word	0x20000018

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4d0d      	ldr	r5, [pc, #52]	@ (8004aac <__libc_init_array+0x38>)
 8004a78:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab0 <__libc_init_array+0x3c>)
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	10a4      	asrs	r4, r4, #2
 8004a7e:	2600      	movs	r6, #0
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	4d0b      	ldr	r5, [pc, #44]	@ (8004ab4 <__libc_init_array+0x40>)
 8004a86:	4c0c      	ldr	r4, [pc, #48]	@ (8004ab8 <__libc_init_array+0x44>)
 8004a88:	f000 fc6e 	bl	8005368 <_init>
 8004a8c:	1b64      	subs	r4, r4, r5
 8004a8e:	10a4      	asrs	r4, r4, #2
 8004a90:	2600      	movs	r6, #0
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	08005594 	.word	0x08005594
 8004ab0:	08005594 	.word	0x08005594
 8004ab4:	08005594 	.word	0x08005594
 8004ab8:	08005598 	.word	0x08005598

08004abc <__retarget_lock_acquire_recursive>:
 8004abc:	4770      	bx	lr

08004abe <__retarget_lock_release_recursive>:
 8004abe:	4770      	bx	lr

08004ac0 <strcpy>:
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac6:	f803 2b01 	strb.w	r2, [r3], #1
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	d1f9      	bne.n	8004ac2 <strcpy+0x2>
 8004ace:	4770      	bx	lr

08004ad0 <_free_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d041      	beq.n	8004b5c <_free_r+0x8c>
 8004ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004adc:	1f0c      	subs	r4, r1, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	18e4      	addlt	r4, r4, r3
 8004ae4:	f000 f8e0 	bl	8004ca8 <__malloc_lock>
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <_free_r+0x90>)
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	b933      	cbnz	r3, 8004afc <_free_r+0x2c>
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	6014      	str	r4, [r2, #0]
 8004af2:	4628      	mov	r0, r5
 8004af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af8:	f000 b8dc 	b.w	8004cb4 <__malloc_unlock>
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	d908      	bls.n	8004b12 <_free_r+0x42>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	1821      	adds	r1, r4, r0
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf01      	itttt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	1809      	addeq	r1, r1, r0
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	e7ed      	b.n	8004aee <_free_r+0x1e>
 8004b12:	461a      	mov	r2, r3
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b10b      	cbz	r3, 8004b1c <_free_r+0x4c>
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	d9fa      	bls.n	8004b12 <_free_r+0x42>
 8004b1c:	6811      	ldr	r1, [r2, #0]
 8004b1e:	1850      	adds	r0, r2, r1
 8004b20:	42a0      	cmp	r0, r4
 8004b22:	d10b      	bne.n	8004b3c <_free_r+0x6c>
 8004b24:	6820      	ldr	r0, [r4, #0]
 8004b26:	4401      	add	r1, r0
 8004b28:	1850      	adds	r0, r2, r1
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	d1e0      	bne.n	8004af2 <_free_r+0x22>
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	4408      	add	r0, r1
 8004b38:	6010      	str	r0, [r2, #0]
 8004b3a:	e7da      	b.n	8004af2 <_free_r+0x22>
 8004b3c:	d902      	bls.n	8004b44 <_free_r+0x74>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	e7d6      	b.n	8004af2 <_free_r+0x22>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	1821      	adds	r1, r4, r0
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf04      	itt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	bf04      	itt	eq
 8004b54:	1809      	addeq	r1, r1, r0
 8004b56:	6021      	streq	r1, [r4, #0]
 8004b58:	6054      	str	r4, [r2, #4]
 8004b5a:	e7ca      	b.n	8004af2 <_free_r+0x22>
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000420 	.word	0x20000420

08004b64 <sbrk_aligned>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4e0f      	ldr	r6, [pc, #60]	@ (8004ba4 <sbrk_aligned+0x40>)
 8004b68:	460c      	mov	r4, r1
 8004b6a:	6831      	ldr	r1, [r6, #0]
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	b911      	cbnz	r1, 8004b76 <sbrk_aligned+0x12>
 8004b70:	f000 fba6 	bl	80052c0 <_sbrk_r>
 8004b74:	6030      	str	r0, [r6, #0]
 8004b76:	4621      	mov	r1, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 fba1 	bl	80052c0 <_sbrk_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d103      	bne.n	8004b8a <sbrk_aligned+0x26>
 8004b82:	f04f 34ff 	mov.w	r4, #4294967295
 8004b86:	4620      	mov	r0, r4
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
 8004b8a:	1cc4      	adds	r4, r0, #3
 8004b8c:	f024 0403 	bic.w	r4, r4, #3
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d0f8      	beq.n	8004b86 <sbrk_aligned+0x22>
 8004b94:	1a21      	subs	r1, r4, r0
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 fb92 	bl	80052c0 <_sbrk_r>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d1f2      	bne.n	8004b86 <sbrk_aligned+0x22>
 8004ba0:	e7ef      	b.n	8004b82 <sbrk_aligned+0x1e>
 8004ba2:	bf00      	nop
 8004ba4:	2000041c 	.word	0x2000041c

08004ba8 <_malloc_r>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	1ccd      	adds	r5, r1, #3
 8004bae:	f025 0503 	bic.w	r5, r5, #3
 8004bb2:	3508      	adds	r5, #8
 8004bb4:	2d0c      	cmp	r5, #12
 8004bb6:	bf38      	it	cc
 8004bb8:	250c      	movcc	r5, #12
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	db01      	blt.n	8004bc4 <_malloc_r+0x1c>
 8004bc0:	42a9      	cmp	r1, r5
 8004bc2:	d904      	bls.n	8004bce <_malloc_r+0x26>
 8004bc4:	230c      	movs	r3, #12
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ca4 <_malloc_r+0xfc>
 8004bd2:	f000 f869 	bl	8004ca8 <__malloc_lock>
 8004bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bda:	461c      	mov	r4, r3
 8004bdc:	bb44      	cbnz	r4, 8004c30 <_malloc_r+0x88>
 8004bde:	4629      	mov	r1, r5
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff ffbf 	bl	8004b64 <sbrk_aligned>
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	4604      	mov	r4, r0
 8004bea:	d158      	bne.n	8004c9e <_malloc_r+0xf6>
 8004bec:	f8d8 4000 	ldr.w	r4, [r8]
 8004bf0:	4627      	mov	r7, r4
 8004bf2:	2f00      	cmp	r7, #0
 8004bf4:	d143      	bne.n	8004c7e <_malloc_r+0xd6>
 8004bf6:	2c00      	cmp	r4, #0
 8004bf8:	d04b      	beq.n	8004c92 <_malloc_r+0xea>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	4630      	mov	r0, r6
 8004c00:	eb04 0903 	add.w	r9, r4, r3
 8004c04:	f000 fb5c 	bl	80052c0 <_sbrk_r>
 8004c08:	4581      	cmp	r9, r0
 8004c0a:	d142      	bne.n	8004c92 <_malloc_r+0xea>
 8004c0c:	6821      	ldr	r1, [r4, #0]
 8004c0e:	1a6d      	subs	r5, r5, r1
 8004c10:	4629      	mov	r1, r5
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7ff ffa6 	bl	8004b64 <sbrk_aligned>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d03a      	beq.n	8004c92 <_malloc_r+0xea>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	442b      	add	r3, r5
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	f8d8 3000 	ldr.w	r3, [r8]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	bb62      	cbnz	r2, 8004c84 <_malloc_r+0xdc>
 8004c2a:	f8c8 7000 	str.w	r7, [r8]
 8004c2e:	e00f      	b.n	8004c50 <_malloc_r+0xa8>
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	1b52      	subs	r2, r2, r5
 8004c34:	d420      	bmi.n	8004c78 <_malloc_r+0xd0>
 8004c36:	2a0b      	cmp	r2, #11
 8004c38:	d917      	bls.n	8004c6a <_malloc_r+0xc2>
 8004c3a:	1961      	adds	r1, r4, r5
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	6025      	str	r5, [r4, #0]
 8004c40:	bf18      	it	ne
 8004c42:	6059      	strne	r1, [r3, #4]
 8004c44:	6863      	ldr	r3, [r4, #4]
 8004c46:	bf08      	it	eq
 8004c48:	f8c8 1000 	streq.w	r1, [r8]
 8004c4c:	5162      	str	r2, [r4, r5]
 8004c4e:	604b      	str	r3, [r1, #4]
 8004c50:	4630      	mov	r0, r6
 8004c52:	f000 f82f 	bl	8004cb4 <__malloc_unlock>
 8004c56:	f104 000b 	add.w	r0, r4, #11
 8004c5a:	1d23      	adds	r3, r4, #4
 8004c5c:	f020 0007 	bic.w	r0, r0, #7
 8004c60:	1ac2      	subs	r2, r0, r3
 8004c62:	bf1c      	itt	ne
 8004c64:	1a1b      	subne	r3, r3, r0
 8004c66:	50a3      	strne	r3, [r4, r2]
 8004c68:	e7af      	b.n	8004bca <_malloc_r+0x22>
 8004c6a:	6862      	ldr	r2, [r4, #4]
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	bf0c      	ite	eq
 8004c70:	f8c8 2000 	streq.w	r2, [r8]
 8004c74:	605a      	strne	r2, [r3, #4]
 8004c76:	e7eb      	b.n	8004c50 <_malloc_r+0xa8>
 8004c78:	4623      	mov	r3, r4
 8004c7a:	6864      	ldr	r4, [r4, #4]
 8004c7c:	e7ae      	b.n	8004bdc <_malloc_r+0x34>
 8004c7e:	463c      	mov	r4, r7
 8004c80:	687f      	ldr	r7, [r7, #4]
 8004c82:	e7b6      	b.n	8004bf2 <_malloc_r+0x4a>
 8004c84:	461a      	mov	r2, r3
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d1fb      	bne.n	8004c84 <_malloc_r+0xdc>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6053      	str	r3, [r2, #4]
 8004c90:	e7de      	b.n	8004c50 <_malloc_r+0xa8>
 8004c92:	230c      	movs	r3, #12
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	4630      	mov	r0, r6
 8004c98:	f000 f80c 	bl	8004cb4 <__malloc_unlock>
 8004c9c:	e794      	b.n	8004bc8 <_malloc_r+0x20>
 8004c9e:	6005      	str	r5, [r0, #0]
 8004ca0:	e7d6      	b.n	8004c50 <_malloc_r+0xa8>
 8004ca2:	bf00      	nop
 8004ca4:	20000420 	.word	0x20000420

08004ca8 <__malloc_lock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	@ (8004cb0 <__malloc_lock+0x8>)
 8004caa:	f7ff bf07 	b.w	8004abc <__retarget_lock_acquire_recursive>
 8004cae:	bf00      	nop
 8004cb0:	20000418 	.word	0x20000418

08004cb4 <__malloc_unlock>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	@ (8004cbc <__malloc_unlock+0x8>)
 8004cb6:	f7ff bf02 	b.w	8004abe <__retarget_lock_release_recursive>
 8004cba:	bf00      	nop
 8004cbc:	20000418 	.word	0x20000418

08004cc0 <__ssputs_r>:
 8004cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc4:	688e      	ldr	r6, [r1, #8]
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	42be      	cmp	r6, r7
 8004cca:	680b      	ldr	r3, [r1, #0]
 8004ccc:	4682      	mov	sl, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	4690      	mov	r8, r2
 8004cd2:	d82d      	bhi.n	8004d30 <__ssputs_r+0x70>
 8004cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cdc:	d026      	beq.n	8004d2c <__ssputs_r+0x6c>
 8004cde:	6965      	ldr	r5, [r4, #20]
 8004ce0:	6909      	ldr	r1, [r1, #16]
 8004ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce6:	eba3 0901 	sub.w	r9, r3, r1
 8004cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cee:	1c7b      	adds	r3, r7, #1
 8004cf0:	444b      	add	r3, r9
 8004cf2:	106d      	asrs	r5, r5, #1
 8004cf4:	429d      	cmp	r5, r3
 8004cf6:	bf38      	it	cc
 8004cf8:	461d      	movcc	r5, r3
 8004cfa:	0553      	lsls	r3, r2, #21
 8004cfc:	d527      	bpl.n	8004d4e <__ssputs_r+0x8e>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7ff ff52 	bl	8004ba8 <_malloc_r>
 8004d04:	4606      	mov	r6, r0
 8004d06:	b360      	cbz	r0, 8004d62 <__ssputs_r+0xa2>
 8004d08:	6921      	ldr	r1, [r4, #16]
 8004d0a:	464a      	mov	r2, r9
 8004d0c:	f000 fae8 	bl	80052e0 <memcpy>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	6126      	str	r6, [r4, #16]
 8004d1e:	6165      	str	r5, [r4, #20]
 8004d20:	444e      	add	r6, r9
 8004d22:	eba5 0509 	sub.w	r5, r5, r9
 8004d26:	6026      	str	r6, [r4, #0]
 8004d28:	60a5      	str	r5, [r4, #8]
 8004d2a:	463e      	mov	r6, r7
 8004d2c:	42be      	cmp	r6, r7
 8004d2e:	d900      	bls.n	8004d32 <__ssputs_r+0x72>
 8004d30:	463e      	mov	r6, r7
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	4632      	mov	r2, r6
 8004d36:	4641      	mov	r1, r8
 8004d38:	f000 faa8 	bl	800528c <memmove>
 8004d3c:	68a3      	ldr	r3, [r4, #8]
 8004d3e:	1b9b      	subs	r3, r3, r6
 8004d40:	60a3      	str	r3, [r4, #8]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4433      	add	r3, r6
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	2000      	movs	r0, #0
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	462a      	mov	r2, r5
 8004d50:	f000 fad4 	bl	80052fc <_realloc_r>
 8004d54:	4606      	mov	r6, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d1e0      	bne.n	8004d1c <__ssputs_r+0x5c>
 8004d5a:	6921      	ldr	r1, [r4, #16]
 8004d5c:	4650      	mov	r0, sl
 8004d5e:	f7ff feb7 	bl	8004ad0 <_free_r>
 8004d62:	230c      	movs	r3, #12
 8004d64:	f8ca 3000 	str.w	r3, [sl]
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	e7e9      	b.n	8004d4a <__ssputs_r+0x8a>
	...

08004d78 <_svfiprintf_r>:
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	4698      	mov	r8, r3
 8004d7e:	898b      	ldrh	r3, [r1, #12]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	b09d      	sub	sp, #116	@ 0x74
 8004d84:	4607      	mov	r7, r0
 8004d86:	460d      	mov	r5, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	d510      	bpl.n	8004dae <_svfiprintf_r+0x36>
 8004d8c:	690b      	ldr	r3, [r1, #16]
 8004d8e:	b973      	cbnz	r3, 8004dae <_svfiprintf_r+0x36>
 8004d90:	2140      	movs	r1, #64	@ 0x40
 8004d92:	f7ff ff09 	bl	8004ba8 <_malloc_r>
 8004d96:	6028      	str	r0, [r5, #0]
 8004d98:	6128      	str	r0, [r5, #16]
 8004d9a:	b930      	cbnz	r0, 8004daa <_svfiprintf_r+0x32>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	b01d      	add	sp, #116	@ 0x74
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	2340      	movs	r3, #64	@ 0x40
 8004dac:	616b      	str	r3, [r5, #20]
 8004dae:	2300      	movs	r3, #0
 8004db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db2:	2320      	movs	r3, #32
 8004db4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dbc:	2330      	movs	r3, #48	@ 0x30
 8004dbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f5c <_svfiprintf_r+0x1e4>
 8004dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dc6:	f04f 0901 	mov.w	r9, #1
 8004dca:	4623      	mov	r3, r4
 8004dcc:	469a      	mov	sl, r3
 8004dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd2:	b10a      	cbz	r2, 8004dd8 <_svfiprintf_r+0x60>
 8004dd4:	2a25      	cmp	r2, #37	@ 0x25
 8004dd6:	d1f9      	bne.n	8004dcc <_svfiprintf_r+0x54>
 8004dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8004ddc:	d00b      	beq.n	8004df6 <_svfiprintf_r+0x7e>
 8004dde:	465b      	mov	r3, fp
 8004de0:	4622      	mov	r2, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	4638      	mov	r0, r7
 8004de6:	f7ff ff6b 	bl	8004cc0 <__ssputs_r>
 8004dea:	3001      	adds	r0, #1
 8004dec:	f000 80a7 	beq.w	8004f3e <_svfiprintf_r+0x1c6>
 8004df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df2:	445a      	add	r2, fp
 8004df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004df6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 809f 	beq.w	8004f3e <_svfiprintf_r+0x1c6>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295
 8004e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0a:	f10a 0a01 	add.w	sl, sl, #1
 8004e0e:	9304      	str	r3, [sp, #16]
 8004e10:	9307      	str	r3, [sp, #28]
 8004e12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e18:	4654      	mov	r4, sl
 8004e1a:	2205      	movs	r2, #5
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	484e      	ldr	r0, [pc, #312]	@ (8004f5c <_svfiprintf_r+0x1e4>)
 8004e22:	f7fb f9fd 	bl	8000220 <memchr>
 8004e26:	9a04      	ldr	r2, [sp, #16]
 8004e28:	b9d8      	cbnz	r0, 8004e62 <_svfiprintf_r+0xea>
 8004e2a:	06d0      	lsls	r0, r2, #27
 8004e2c:	bf44      	itt	mi
 8004e2e:	2320      	movmi	r3, #32
 8004e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e34:	0711      	lsls	r1, r2, #28
 8004e36:	bf44      	itt	mi
 8004e38:	232b      	movmi	r3, #43	@ 0x2b
 8004e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e44:	d015      	beq.n	8004e72 <_svfiprintf_r+0xfa>
 8004e46:	9a07      	ldr	r2, [sp, #28]
 8004e48:	4654      	mov	r4, sl
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f04f 0c0a 	mov.w	ip, #10
 8004e50:	4621      	mov	r1, r4
 8004e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e56:	3b30      	subs	r3, #48	@ 0x30
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	d94b      	bls.n	8004ef4 <_svfiprintf_r+0x17c>
 8004e5c:	b1b0      	cbz	r0, 8004e8c <_svfiprintf_r+0x114>
 8004e5e:	9207      	str	r2, [sp, #28]
 8004e60:	e014      	b.n	8004e8c <_svfiprintf_r+0x114>
 8004e62:	eba0 0308 	sub.w	r3, r0, r8
 8004e66:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	46a2      	mov	sl, r4
 8004e70:	e7d2      	b.n	8004e18 <_svfiprintf_r+0xa0>
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	1d19      	adds	r1, r3, #4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	9103      	str	r1, [sp, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfbb      	ittet	lt
 8004e7e:	425b      	neglt	r3, r3
 8004e80:	f042 0202 	orrlt.w	r2, r2, #2
 8004e84:	9307      	strge	r3, [sp, #28]
 8004e86:	9307      	strlt	r3, [sp, #28]
 8004e88:	bfb8      	it	lt
 8004e8a:	9204      	strlt	r2, [sp, #16]
 8004e8c:	7823      	ldrb	r3, [r4, #0]
 8004e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e90:	d10a      	bne.n	8004ea8 <_svfiprintf_r+0x130>
 8004e92:	7863      	ldrb	r3, [r4, #1]
 8004e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e96:	d132      	bne.n	8004efe <_svfiprintf_r+0x186>
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	9203      	str	r2, [sp, #12]
 8004ea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ea4:	3402      	adds	r4, #2
 8004ea6:	9305      	str	r3, [sp, #20]
 8004ea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f6c <_svfiprintf_r+0x1f4>
 8004eac:	7821      	ldrb	r1, [r4, #0]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	4650      	mov	r0, sl
 8004eb2:	f7fb f9b5 	bl	8000220 <memchr>
 8004eb6:	b138      	cbz	r0, 8004ec8 <_svfiprintf_r+0x150>
 8004eb8:	9b04      	ldr	r3, [sp, #16]
 8004eba:	eba0 000a 	sub.w	r0, r0, sl
 8004ebe:	2240      	movs	r2, #64	@ 0x40
 8004ec0:	4082      	lsls	r2, r0
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	3401      	adds	r4, #1
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	4824      	ldr	r0, [pc, #144]	@ (8004f60 <_svfiprintf_r+0x1e8>)
 8004ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	f7fb f9a4 	bl	8000220 <memchr>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d036      	beq.n	8004f4a <_svfiprintf_r+0x1d2>
 8004edc:	4b21      	ldr	r3, [pc, #132]	@ (8004f64 <_svfiprintf_r+0x1ec>)
 8004ede:	bb1b      	cbnz	r3, 8004f28 <_svfiprintf_r+0x1b0>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	3308      	adds	r3, #8
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eee:	4433      	add	r3, r6
 8004ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ef2:	e76a      	b.n	8004dca <_svfiprintf_r+0x52>
 8004ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef8:	460c      	mov	r4, r1
 8004efa:	2001      	movs	r0, #1
 8004efc:	e7a8      	b.n	8004e50 <_svfiprintf_r+0xd8>
 8004efe:	2300      	movs	r3, #0
 8004f00:	3401      	adds	r4, #1
 8004f02:	9305      	str	r3, [sp, #20]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f04f 0c0a 	mov.w	ip, #10
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f10:	3a30      	subs	r2, #48	@ 0x30
 8004f12:	2a09      	cmp	r2, #9
 8004f14:	d903      	bls.n	8004f1e <_svfiprintf_r+0x1a6>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0c6      	beq.n	8004ea8 <_svfiprintf_r+0x130>
 8004f1a:	9105      	str	r1, [sp, #20]
 8004f1c:	e7c4      	b.n	8004ea8 <_svfiprintf_r+0x130>
 8004f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f22:	4604      	mov	r4, r0
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7f0      	b.n	8004f0a <_svfiprintf_r+0x192>
 8004f28:	ab03      	add	r3, sp, #12
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	462a      	mov	r2, r5
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <_svfiprintf_r+0x1f0>)
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	4638      	mov	r0, r7
 8004f34:	f3af 8000 	nop.w
 8004f38:	1c42      	adds	r2, r0, #1
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	d1d6      	bne.n	8004eec <_svfiprintf_r+0x174>
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	065b      	lsls	r3, r3, #25
 8004f42:	f53f af2d 	bmi.w	8004da0 <_svfiprintf_r+0x28>
 8004f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f48:	e72c      	b.n	8004da4 <_svfiprintf_r+0x2c>
 8004f4a:	ab03      	add	r3, sp, #12
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	462a      	mov	r2, r5
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <_svfiprintf_r+0x1f0>)
 8004f52:	a904      	add	r1, sp, #16
 8004f54:	4638      	mov	r0, r7
 8004f56:	f000 f879 	bl	800504c <_printf_i>
 8004f5a:	e7ed      	b.n	8004f38 <_svfiprintf_r+0x1c0>
 8004f5c:	08005558 	.word	0x08005558
 8004f60:	08005562 	.word	0x08005562
 8004f64:	00000000 	.word	0x00000000
 8004f68:	08004cc1 	.word	0x08004cc1
 8004f6c:	0800555e 	.word	0x0800555e

08004f70 <_printf_common>:
 8004f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	4616      	mov	r6, r2
 8004f76:	4698      	mov	r8, r3
 8004f78:	688a      	ldr	r2, [r1, #8]
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bfb8      	it	lt
 8004f84:	4613      	movlt	r3, r2
 8004f86:	6033      	str	r3, [r6, #0]
 8004f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	b10a      	cbz	r2, 8004f96 <_printf_common+0x26>
 8004f92:	3301      	adds	r3, #1
 8004f94:	6033      	str	r3, [r6, #0]
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	0699      	lsls	r1, r3, #26
 8004f9a:	bf42      	ittt	mi
 8004f9c:	6833      	ldrmi	r3, [r6, #0]
 8004f9e:	3302      	addmi	r3, #2
 8004fa0:	6033      	strmi	r3, [r6, #0]
 8004fa2:	6825      	ldr	r5, [r4, #0]
 8004fa4:	f015 0506 	ands.w	r5, r5, #6
 8004fa8:	d106      	bne.n	8004fb8 <_printf_common+0x48>
 8004faa:	f104 0a19 	add.w	sl, r4, #25
 8004fae:	68e3      	ldr	r3, [r4, #12]
 8004fb0:	6832      	ldr	r2, [r6, #0]
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	42ab      	cmp	r3, r5
 8004fb6:	dc26      	bgt.n	8005006 <_printf_common+0x96>
 8004fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	3b00      	subs	r3, #0
 8004fc0:	bf18      	it	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	0692      	lsls	r2, r2, #26
 8004fc6:	d42b      	bmi.n	8005020 <_printf_common+0xb0>
 8004fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fcc:	4641      	mov	r1, r8
 8004fce:	4638      	mov	r0, r7
 8004fd0:	47c8      	blx	r9
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d01e      	beq.n	8005014 <_printf_common+0xa4>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	f003 0306 	and.w	r3, r3, #6
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	bf02      	ittt	eq
 8004fe2:	68e5      	ldreq	r5, [r4, #12]
 8004fe4:	6833      	ldreq	r3, [r6, #0]
 8004fe6:	1aed      	subeq	r5, r5, r3
 8004fe8:	68a3      	ldr	r3, [r4, #8]
 8004fea:	bf0c      	ite	eq
 8004fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff0:	2500      	movne	r5, #0
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bfc4      	itt	gt
 8004ff6:	1a9b      	subgt	r3, r3, r2
 8004ff8:	18ed      	addgt	r5, r5, r3
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	341a      	adds	r4, #26
 8004ffe:	42b5      	cmp	r5, r6
 8005000:	d11a      	bne.n	8005038 <_printf_common+0xc8>
 8005002:	2000      	movs	r0, #0
 8005004:	e008      	b.n	8005018 <_printf_common+0xa8>
 8005006:	2301      	movs	r3, #1
 8005008:	4652      	mov	r2, sl
 800500a:	4641      	mov	r1, r8
 800500c:	4638      	mov	r0, r7
 800500e:	47c8      	blx	r9
 8005010:	3001      	adds	r0, #1
 8005012:	d103      	bne.n	800501c <_printf_common+0xac>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	3501      	adds	r5, #1
 800501e:	e7c6      	b.n	8004fae <_printf_common+0x3e>
 8005020:	18e1      	adds	r1, r4, r3
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	2030      	movs	r0, #48	@ 0x30
 8005026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800502a:	4422      	add	r2, r4
 800502c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005034:	3302      	adds	r3, #2
 8005036:	e7c7      	b.n	8004fc8 <_printf_common+0x58>
 8005038:	2301      	movs	r3, #1
 800503a:	4622      	mov	r2, r4
 800503c:	4641      	mov	r1, r8
 800503e:	4638      	mov	r0, r7
 8005040:	47c8      	blx	r9
 8005042:	3001      	adds	r0, #1
 8005044:	d0e6      	beq.n	8005014 <_printf_common+0xa4>
 8005046:	3601      	adds	r6, #1
 8005048:	e7d9      	b.n	8004ffe <_printf_common+0x8e>
	...

0800504c <_printf_i>:
 800504c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	7e0f      	ldrb	r7, [r1, #24]
 8005052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005054:	2f78      	cmp	r7, #120	@ 0x78
 8005056:	4691      	mov	r9, r2
 8005058:	4680      	mov	r8, r0
 800505a:	460c      	mov	r4, r1
 800505c:	469a      	mov	sl, r3
 800505e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005062:	d807      	bhi.n	8005074 <_printf_i+0x28>
 8005064:	2f62      	cmp	r7, #98	@ 0x62
 8005066:	d80a      	bhi.n	800507e <_printf_i+0x32>
 8005068:	2f00      	cmp	r7, #0
 800506a:	f000 80d2 	beq.w	8005212 <_printf_i+0x1c6>
 800506e:	2f58      	cmp	r7, #88	@ 0x58
 8005070:	f000 80b9 	beq.w	80051e6 <_printf_i+0x19a>
 8005074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800507c:	e03a      	b.n	80050f4 <_printf_i+0xa8>
 800507e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005082:	2b15      	cmp	r3, #21
 8005084:	d8f6      	bhi.n	8005074 <_printf_i+0x28>
 8005086:	a101      	add	r1, pc, #4	@ (adr r1, 800508c <_printf_i+0x40>)
 8005088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050f9 	.word	0x080050f9
 8005094:	08005075 	.word	0x08005075
 8005098:	08005075 	.word	0x08005075
 800509c:	08005075 	.word	0x08005075
 80050a0:	08005075 	.word	0x08005075
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005075 	.word	0x08005075
 80050ac:	08005075 	.word	0x08005075
 80050b0:	08005075 	.word	0x08005075
 80050b4:	08005075 	.word	0x08005075
 80050b8:	080051f9 	.word	0x080051f9
 80050bc:	08005123 	.word	0x08005123
 80050c0:	080051b3 	.word	0x080051b3
 80050c4:	08005075 	.word	0x08005075
 80050c8:	08005075 	.word	0x08005075
 80050cc:	0800521b 	.word	0x0800521b
 80050d0:	08005075 	.word	0x08005075
 80050d4:	08005123 	.word	0x08005123
 80050d8:	08005075 	.word	0x08005075
 80050dc:	08005075 	.word	0x08005075
 80050e0:	080051bb 	.word	0x080051bb
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6032      	str	r2, [r6, #0]
 80050ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050f4:	2301      	movs	r3, #1
 80050f6:	e09d      	b.n	8005234 <_printf_i+0x1e8>
 80050f8:	6833      	ldr	r3, [r6, #0]
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	1d19      	adds	r1, r3, #4
 80050fe:	6031      	str	r1, [r6, #0]
 8005100:	0606      	lsls	r6, r0, #24
 8005102:	d501      	bpl.n	8005108 <_printf_i+0xbc>
 8005104:	681d      	ldr	r5, [r3, #0]
 8005106:	e003      	b.n	8005110 <_printf_i+0xc4>
 8005108:	0645      	lsls	r5, r0, #25
 800510a:	d5fb      	bpl.n	8005104 <_printf_i+0xb8>
 800510c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005110:	2d00      	cmp	r5, #0
 8005112:	da03      	bge.n	800511c <_printf_i+0xd0>
 8005114:	232d      	movs	r3, #45	@ 0x2d
 8005116:	426d      	negs	r5, r5
 8005118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800511c:	4859      	ldr	r0, [pc, #356]	@ (8005284 <_printf_i+0x238>)
 800511e:	230a      	movs	r3, #10
 8005120:	e011      	b.n	8005146 <_printf_i+0xfa>
 8005122:	6821      	ldr	r1, [r4, #0]
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	0608      	lsls	r0, r1, #24
 8005128:	f853 5b04 	ldr.w	r5, [r3], #4
 800512c:	d402      	bmi.n	8005134 <_printf_i+0xe8>
 800512e:	0649      	lsls	r1, r1, #25
 8005130:	bf48      	it	mi
 8005132:	b2ad      	uxthmi	r5, r5
 8005134:	2f6f      	cmp	r7, #111	@ 0x6f
 8005136:	4853      	ldr	r0, [pc, #332]	@ (8005284 <_printf_i+0x238>)
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	bf14      	ite	ne
 800513c:	230a      	movne	r3, #10
 800513e:	2308      	moveq	r3, #8
 8005140:	2100      	movs	r1, #0
 8005142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005146:	6866      	ldr	r6, [r4, #4]
 8005148:	60a6      	str	r6, [r4, #8]
 800514a:	2e00      	cmp	r6, #0
 800514c:	bfa2      	ittt	ge
 800514e:	6821      	ldrge	r1, [r4, #0]
 8005150:	f021 0104 	bicge.w	r1, r1, #4
 8005154:	6021      	strge	r1, [r4, #0]
 8005156:	b90d      	cbnz	r5, 800515c <_printf_i+0x110>
 8005158:	2e00      	cmp	r6, #0
 800515a:	d04b      	beq.n	80051f4 <_printf_i+0x1a8>
 800515c:	4616      	mov	r6, r2
 800515e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005162:	fb03 5711 	mls	r7, r3, r1, r5
 8005166:	5dc7      	ldrb	r7, [r0, r7]
 8005168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800516c:	462f      	mov	r7, r5
 800516e:	42bb      	cmp	r3, r7
 8005170:	460d      	mov	r5, r1
 8005172:	d9f4      	bls.n	800515e <_printf_i+0x112>
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10b      	bne.n	8005190 <_printf_i+0x144>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	07df      	lsls	r7, r3, #31
 800517c:	d508      	bpl.n	8005190 <_printf_i+0x144>
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	6861      	ldr	r1, [r4, #4]
 8005182:	4299      	cmp	r1, r3
 8005184:	bfde      	ittt	le
 8005186:	2330      	movle	r3, #48	@ 0x30
 8005188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800518c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005190:	1b92      	subs	r2, r2, r6
 8005192:	6122      	str	r2, [r4, #16]
 8005194:	f8cd a000 	str.w	sl, [sp]
 8005198:	464b      	mov	r3, r9
 800519a:	aa03      	add	r2, sp, #12
 800519c:	4621      	mov	r1, r4
 800519e:	4640      	mov	r0, r8
 80051a0:	f7ff fee6 	bl	8004f70 <_printf_common>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d14a      	bne.n	800523e <_printf_i+0x1f2>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	b004      	add	sp, #16
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	4833      	ldr	r0, [pc, #204]	@ (8005288 <_printf_i+0x23c>)
 80051bc:	2778      	movs	r7, #120	@ 0x78
 80051be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	6831      	ldr	r1, [r6, #0]
 80051c6:	061f      	lsls	r7, r3, #24
 80051c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80051cc:	d402      	bmi.n	80051d4 <_printf_i+0x188>
 80051ce:	065f      	lsls	r7, r3, #25
 80051d0:	bf48      	it	mi
 80051d2:	b2ad      	uxthmi	r5, r5
 80051d4:	6031      	str	r1, [r6, #0]
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	bf44      	itt	mi
 80051da:	f043 0320 	orrmi.w	r3, r3, #32
 80051de:	6023      	strmi	r3, [r4, #0]
 80051e0:	b11d      	cbz	r5, 80051ea <_printf_i+0x19e>
 80051e2:	2310      	movs	r3, #16
 80051e4:	e7ac      	b.n	8005140 <_printf_i+0xf4>
 80051e6:	4827      	ldr	r0, [pc, #156]	@ (8005284 <_printf_i+0x238>)
 80051e8:	e7e9      	b.n	80051be <_printf_i+0x172>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f023 0320 	bic.w	r3, r3, #32
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	e7f6      	b.n	80051e2 <_printf_i+0x196>
 80051f4:	4616      	mov	r6, r2
 80051f6:	e7bd      	b.n	8005174 <_printf_i+0x128>
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	6825      	ldr	r5, [r4, #0]
 80051fc:	6961      	ldr	r1, [r4, #20]
 80051fe:	1d18      	adds	r0, r3, #4
 8005200:	6030      	str	r0, [r6, #0]
 8005202:	062e      	lsls	r6, r5, #24
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	d501      	bpl.n	800520c <_printf_i+0x1c0>
 8005208:	6019      	str	r1, [r3, #0]
 800520a:	e002      	b.n	8005212 <_printf_i+0x1c6>
 800520c:	0668      	lsls	r0, r5, #25
 800520e:	d5fb      	bpl.n	8005208 <_printf_i+0x1bc>
 8005210:	8019      	strh	r1, [r3, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	4616      	mov	r6, r2
 8005218:	e7bc      	b.n	8005194 <_printf_i+0x148>
 800521a:	6833      	ldr	r3, [r6, #0]
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	6032      	str	r2, [r6, #0]
 8005220:	681e      	ldr	r6, [r3, #0]
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	2100      	movs	r1, #0
 8005226:	4630      	mov	r0, r6
 8005228:	f7fa fffa 	bl	8000220 <memchr>
 800522c:	b108      	cbz	r0, 8005232 <_printf_i+0x1e6>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	6060      	str	r0, [r4, #4]
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	6123      	str	r3, [r4, #16]
 8005236:	2300      	movs	r3, #0
 8005238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800523c:	e7aa      	b.n	8005194 <_printf_i+0x148>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	4632      	mov	r2, r6
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	47d0      	blx	sl
 8005248:	3001      	adds	r0, #1
 800524a:	d0ad      	beq.n	80051a8 <_printf_i+0x15c>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	079b      	lsls	r3, r3, #30
 8005250:	d413      	bmi.n	800527a <_printf_i+0x22e>
 8005252:	68e0      	ldr	r0, [r4, #12]
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	4298      	cmp	r0, r3
 8005258:	bfb8      	it	lt
 800525a:	4618      	movlt	r0, r3
 800525c:	e7a6      	b.n	80051ac <_printf_i+0x160>
 800525e:	2301      	movs	r3, #1
 8005260:	4632      	mov	r2, r6
 8005262:	4649      	mov	r1, r9
 8005264:	4640      	mov	r0, r8
 8005266:	47d0      	blx	sl
 8005268:	3001      	adds	r0, #1
 800526a:	d09d      	beq.n	80051a8 <_printf_i+0x15c>
 800526c:	3501      	adds	r5, #1
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	9903      	ldr	r1, [sp, #12]
 8005272:	1a5b      	subs	r3, r3, r1
 8005274:	42ab      	cmp	r3, r5
 8005276:	dcf2      	bgt.n	800525e <_printf_i+0x212>
 8005278:	e7eb      	b.n	8005252 <_printf_i+0x206>
 800527a:	2500      	movs	r5, #0
 800527c:	f104 0619 	add.w	r6, r4, #25
 8005280:	e7f5      	b.n	800526e <_printf_i+0x222>
 8005282:	bf00      	nop
 8005284:	08005569 	.word	0x08005569
 8005288:	0800557a 	.word	0x0800557a

0800528c <memmove>:
 800528c:	4288      	cmp	r0, r1
 800528e:	b510      	push	{r4, lr}
 8005290:	eb01 0402 	add.w	r4, r1, r2
 8005294:	d902      	bls.n	800529c <memmove+0x10>
 8005296:	4284      	cmp	r4, r0
 8005298:	4623      	mov	r3, r4
 800529a:	d807      	bhi.n	80052ac <memmove+0x20>
 800529c:	1e43      	subs	r3, r0, #1
 800529e:	42a1      	cmp	r1, r4
 80052a0:	d008      	beq.n	80052b4 <memmove+0x28>
 80052a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052aa:	e7f8      	b.n	800529e <memmove+0x12>
 80052ac:	4402      	add	r2, r0
 80052ae:	4601      	mov	r1, r0
 80052b0:	428a      	cmp	r2, r1
 80052b2:	d100      	bne.n	80052b6 <memmove+0x2a>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052be:	e7f7      	b.n	80052b0 <memmove+0x24>

080052c0 <_sbrk_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d06      	ldr	r5, [pc, #24]	@ (80052dc <_sbrk_r+0x1c>)
 80052c4:	2300      	movs	r3, #0
 80052c6:	4604      	mov	r4, r0
 80052c8:	4608      	mov	r0, r1
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	f7fc fa38 	bl	8001740 <_sbrk>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_sbrk_r+0x1a>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_sbrk_r+0x1a>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20000414 	.word	0x20000414

080052e0 <memcpy>:
 80052e0:	440a      	add	r2, r1
 80052e2:	4291      	cmp	r1, r2
 80052e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e8:	d100      	bne.n	80052ec <memcpy+0xc>
 80052ea:	4770      	bx	lr
 80052ec:	b510      	push	{r4, lr}
 80052ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f6:	4291      	cmp	r1, r2
 80052f8:	d1f9      	bne.n	80052ee <memcpy+0xe>
 80052fa:	bd10      	pop	{r4, pc}

080052fc <_realloc_r>:
 80052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005300:	4680      	mov	r8, r0
 8005302:	4615      	mov	r5, r2
 8005304:	460c      	mov	r4, r1
 8005306:	b921      	cbnz	r1, 8005312 <_realloc_r+0x16>
 8005308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	4611      	mov	r1, r2
 800530e:	f7ff bc4b 	b.w	8004ba8 <_malloc_r>
 8005312:	b92a      	cbnz	r2, 8005320 <_realloc_r+0x24>
 8005314:	f7ff fbdc 	bl	8004ad0 <_free_r>
 8005318:	2400      	movs	r4, #0
 800531a:	4620      	mov	r0, r4
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	f000 f81a 	bl	8005358 <_malloc_usable_size_r>
 8005324:	4285      	cmp	r5, r0
 8005326:	4606      	mov	r6, r0
 8005328:	d802      	bhi.n	8005330 <_realloc_r+0x34>
 800532a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800532e:	d8f4      	bhi.n	800531a <_realloc_r+0x1e>
 8005330:	4629      	mov	r1, r5
 8005332:	4640      	mov	r0, r8
 8005334:	f7ff fc38 	bl	8004ba8 <_malloc_r>
 8005338:	4607      	mov	r7, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d0ec      	beq.n	8005318 <_realloc_r+0x1c>
 800533e:	42b5      	cmp	r5, r6
 8005340:	462a      	mov	r2, r5
 8005342:	4621      	mov	r1, r4
 8005344:	bf28      	it	cs
 8005346:	4632      	movcs	r2, r6
 8005348:	f7ff ffca 	bl	80052e0 <memcpy>
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff fbbe 	bl	8004ad0 <_free_r>
 8005354:	463c      	mov	r4, r7
 8005356:	e7e0      	b.n	800531a <_realloc_r+0x1e>

08005358 <_malloc_usable_size_r>:
 8005358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800535c:	1f18      	subs	r0, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	bfbc      	itt	lt
 8005362:	580b      	ldrlt	r3, [r1, r0]
 8005364:	18c0      	addlt	r0, r0, r3
 8005366:	4770      	bx	lr

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
