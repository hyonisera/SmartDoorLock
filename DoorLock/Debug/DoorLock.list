
DoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c0  080037c0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000047c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037c4  080037c4  000047c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080037c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000020c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c64e  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6b  00000000  00000000  000116da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  00013148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  00013d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235f2  00000000  00000000  00014640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d53e  00000000  00000000  00037c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da134  00000000  00000000  00045170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f2a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036a0  00000000  00000000  0011f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00122988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800374c 	.word	0x0800374c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	0800374c 	.word	0x0800374c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fbe6 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f810 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f8fa 	bl	8000794 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005a0:	f000 f880 	bl	80006a4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 f8cc 	bl	8000740 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a8:	f000 f868 	bl	800067c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <main+0x28>)
 80005ae:	f001 fbfb 	bl	8001da8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x22>
 80005b6:	bf00      	nop
 80005b8:	20000078 	.word	0x20000078

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fc3e 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xb8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <SystemClock_Config+0xb8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <SystemClock_Config+0xb8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <SystemClock_Config+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <SystemClock_Config+0xbc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ff11 	bl	8001458 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800063c:	f000 fa3a 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f974 	bl	8001948 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000666:	f000 fa25 	bl	8000ab4 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2028      	movs	r0, #40	@ 0x28
 8000686:	f000 fcba 	bl	8000ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800068a:	2028      	movs	r0, #40	@ 0x28
 800068c:	f000 fcd3 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	201d      	movs	r0, #29
 8000696:	f000 fcb2 	bl	8000ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800069a:	201d      	movs	r0, #29
 800069c:	f000 fccb 	bl	8001036 <HAL_NVIC_EnableIRQ>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006c2:	4a1e      	ldr	r2, [pc, #120]	@ (800073c <MX_TIM3_Init+0x98>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006c8:	f240 623f 	movw	r2, #1599	@ 0x63f
 80006cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_TIM3_Init+0x94>)
 80006ea:	f001 fb0d 	bl	8001d08 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006f4:	f000 f9de 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_TIM3_Init+0x94>)
 8000706:	f001 fcaf 	bl	8002068 <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 f9d0 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000714:	2320      	movs	r3, #32
 8000716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_TIM3_Init+0x94>)
 8000722:	f001 fed7 	bl	80024d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f9c2 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000078 	.word	0x20000078
 800073c:	40000400 	.word	0x40000400

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_USART3_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000778:	f001 ff3c 	bl	80025f4 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f997 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000c0 	.word	0x200000c0
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b37      	ldr	r3, [pc, #220]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a36      	ldr	r2, [pc, #216]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b34      	ldr	r3, [pc, #208]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b30      	ldr	r3, [pc, #192]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a2f      	ldr	r2, [pc, #188]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b29      	ldr	r3, [pc, #164]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a28      	ldr	r2, [pc, #160]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xf8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_GPIO_Init+0xf8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a21      	ldr	r2, [pc, #132]	@ (800088c <MX_GPIO_Init+0xf8>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_GPIO_Init+0xf8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD6_Pin|KEYPAD5_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2144      	movs	r1, #68	@ 0x44
 800081e:	481c      	ldr	r0, [pc, #112]	@ (8000890 <MX_GPIO_Init+0xfc>)
 8000820:	f000 fde8 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEYPAD7_GPIO_Port, KEYPAD7_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2101      	movs	r1, #1
 8000828:	481a      	ldr	r0, [pc, #104]	@ (8000894 <MX_GPIO_Init+0x100>)
 800082a:	f000 fde3 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEYPAD6_Pin KEYPAD5_Pin */
  GPIO_InitStruct.Pin = KEYPAD6_Pin|KEYPAD5_Pin;
 800082e:	2344      	movs	r3, #68	@ 0x44
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_GPIO_Init+0xfc>)
 8000846:	f000 fc11 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD1_Pin KEYPAD2_Pin KEYPAD3_Pin KEYPAD4_Pin */
  GPIO_InitStruct.Pin = KEYPAD1_Pin|KEYPAD2_Pin|KEYPAD3_Pin|KEYPAD4_Pin;
 800084a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000850:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	@ (8000898 <MX_GPIO_Init+0x104>)
 8000862:	f000 fc03 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEYPAD7_Pin */
  GPIO_InitStruct.Pin = KEYPAD7_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD7_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_GPIO_Init+0x100>)
 800087e:	f000 fbf5 	bl	800106c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	@ 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	40021400 	.word	0x40021400

0800089c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a26      	ldr	r2, [pc, #152]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d146      	bne.n	800093c <HAL_TIM_PeriodElapsedCallback+0xa0>
		if(state == STATE1){
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10c      	bne.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x34>
			KEYPAD5 = 0; KEYPAD6 = 1; KEYPAD7 = 1;
 80008b6:	4b25      	ldr	r3, [pc, #148]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
			state = STATE2;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e020      	b.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x76>
		}
		else if(state == STATE2){
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d10c      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x56>
			KEYPAD5 = 1; KEYPAD6 = 0; KEYPAD7 = 1;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
			state = STATE3;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e00f      	b.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x76>
		}
		else if(state == STATE3){
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d10b      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x76>
			KEYPAD5 = 1; KEYPAD6 = 1; KEYPAD7 = 0;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
			state = STATE1;
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(KEYPAD5_GPIO_Port, KEYPAD5_Pin, KEYPAD5);
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800091c:	f000 fd6a 	bl	80013f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD6_GPIO_Port, KEYPAD6_Pin, KEYPAD6);
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	2104      	movs	r1, #4
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800092a:	f000 fd63 	bl	80013f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD7_GPIO_Port, KEYPAD7_Pin, KEYPAD7);
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	2101      	movs	r1, #1
 8000936:	4809      	ldr	r0, [pc, #36]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000938:	f000 fd5c 	bl	80013f4 <HAL_GPIO_WritePin>
	}
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40000400 	.word	0x40000400
 8000948:	20000108 	.word	0x20000108
 800094c:	20000109 	.word	0x20000109
 8000950:	2000010a 	.word	0x2000010a
 8000954:	2000010b 	.word	0x2000010b
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800

08000960 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == KEYPAD1_Pin) {
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000970:	d11c      	bne.n	80009ac <HAL_GPIO_EXTI_Callback+0x4c>
		if(state == STATE2) {
 8000972:	4b4a      	ldr	r3, [pc, #296]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d103      	bne.n	8000982 <HAL_GPIO_EXTI_Callback+0x22>
			num = '1';
 800097a:	4b49      	ldr	r3, [pc, #292]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 800097c:	2231      	movs	r2, #49	@ 0x31
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e00e      	b.n	80009a0 <HAL_GPIO_EXTI_Callback+0x40>
		}
		else if(state == STATE3) {
 8000982:	4b46      	ldr	r3, [pc, #280]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d103      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x32>
			num = '2';
 800098a:	4b45      	ldr	r3, [pc, #276]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 800098c:	2232      	movs	r2, #50	@ 0x32
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_EXTI_Callback+0x40>
		}
		else if(state == STATE1) {
 8000992:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_GPIO_EXTI_Callback+0x40>
			num = '3';
 800099a:	4b41      	ldr	r3, [pc, #260]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 800099c:	2233      	movs	r2, #51	@ 0x33
 800099e:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_ReadPin(KEYPAD1_GPIO_Port, KEYPAD1_Pin);
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	483f      	ldr	r0, [pc, #252]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x144>)
 80009a6:	f000 fd0d 	bl	80013c4 <HAL_GPIO_ReadPin>
 80009aa:	e061      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x110>
	}
	else if(GPIO_Pin == KEYPAD2_Pin) {
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b2:	d11c      	bne.n	80009ee <HAL_GPIO_EXTI_Callback+0x8e>
		if(state == STATE2) {
 80009b4:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d103      	bne.n	80009c4 <HAL_GPIO_EXTI_Callback+0x64>
			num = '4';
 80009bc:	4b38      	ldr	r3, [pc, #224]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 80009be:	2234      	movs	r2, #52	@ 0x34
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e00e      	b.n	80009e2 <HAL_GPIO_EXTI_Callback+0x82>
		}
		else if(state == STATE3) {
 80009c4:	4b35      	ldr	r3, [pc, #212]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d103      	bne.n	80009d4 <HAL_GPIO_EXTI_Callback+0x74>
			num = '5';
 80009cc:	4b34      	ldr	r3, [pc, #208]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 80009ce:	2235      	movs	r2, #53	@ 0x35
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_EXTI_Callback+0x82>
		}
		else if(state == STATE1) {
 80009d4:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <HAL_GPIO_EXTI_Callback+0x82>
			num = '6';
 80009dc:	4b30      	ldr	r3, [pc, #192]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 80009de:	2236      	movs	r2, #54	@ 0x36
 80009e0:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_ReadPin(KEYPAD2_GPIO_Port, KEYPAD2_Pin);
 80009e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e6:	482f      	ldr	r0, [pc, #188]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x144>)
 80009e8:	f000 fcec 	bl	80013c4 <HAL_GPIO_ReadPin>
 80009ec:	e040      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x110>
	}
	else if(GPIO_Pin == KEYPAD3_Pin) {
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009f4:	d11c      	bne.n	8000a30 <HAL_GPIO_EXTI_Callback+0xd0>
		if(state == STATE2) {
 80009f6:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d103      	bne.n	8000a06 <HAL_GPIO_EXTI_Callback+0xa6>
			num = '7';
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a00:	2237      	movs	r2, #55	@ 0x37
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e00e      	b.n	8000a24 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else if(state == STATE3) {
 8000a06:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d103      	bne.n	8000a16 <HAL_GPIO_EXTI_Callback+0xb6>
			num = '8';
 8000a0e:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a10:	2238      	movs	r2, #56	@ 0x38
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else if(state == STATE1) {
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <HAL_GPIO_EXTI_Callback+0xc4>
			num = '9';
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a20:	2239      	movs	r2, #57	@ 0x39
 8000a22:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_ReadPin(KEYPAD3_GPIO_Port, KEYPAD3_Pin);
 8000a24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a28:	481e      	ldr	r0, [pc, #120]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a2a:	f000 fccb 	bl	80013c4 <HAL_GPIO_ReadPin>
 8000a2e:	e01f      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x110>
	}
	else if(GPIO_Pin == KEYPAD4_Pin) {
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a36:	d11b      	bne.n	8000a70 <HAL_GPIO_EXTI_Callback+0x110>
		if(state == STATE2) {
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d103      	bne.n	8000a48 <HAL_GPIO_EXTI_Callback+0xe8>
			num = '*';
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a42:	222a      	movs	r2, #42	@ 0x2a
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e00e      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x106>
		}
		else if(state == STATE3) {
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d103      	bne.n	8000a58 <HAL_GPIO_EXTI_Callback+0xf8>
			num = '0';
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a52:	2230      	movs	r2, #48	@ 0x30
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x106>
		}
		else if(state == STATE1) {
 8000a58:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <HAL_GPIO_EXTI_Callback+0x106>
			num = '#';
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a62:	2223      	movs	r2, #35	@ 0x23
 8000a64:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_ReadPin(KEYPAD4_GPIO_Port, KEYPAD4_Pin);
 8000a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a6a:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a6c:	f000 fcaa 	bl	80013c4 <HAL_GPIO_ReadPin>
	}

	sprintf(tx_buf, "%c\n\r", num);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <HAL_GPIO_EXTI_Callback+0x140>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a7a:	f002 f9c7 	bl	8002e0c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)tx_buf, strlen(tx_buf), 100);
 8000a7e:	480b      	ldr	r0, [pc, #44]	@ (8000aac <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a80:	f7ff fbb6 	bl	80001f0 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	2364      	movs	r3, #100	@ 0x64
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a8e:	f001 fe01 	bl	8002694 <HAL_UART_Transmit>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000108 	.word	0x20000108
 8000aa0:	20000116 	.word	0x20000116
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	08003764 	.word	0x08003764
 8000aac:	2000010c 	.word	0x2000010c
 8000ab0:	200000c0 	.word	0x200000c0

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	@ (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b4c <HAL_TIM_Base_MspInit+0x3c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10d      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_TIM_Base_MspInit+0x40>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <HAL_TIM_Base_MspInit+0x40>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <HAL_TIM_Base_MspInit+0x40>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40000400 	.word	0x40000400
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12c      	bne.n	8000bd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_UART_MspInit+0x8c>)
 8000bcc:	f000 fa4e 	bl	800106c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	@ 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f8e5 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM3_IRQHandler+0x10>)
 8000c4a:	f001 f91d 	bl	8001e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000078 	.word	0x20000078

08000c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEYPAD1_Pin);
 8000c5c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c60:	f000 fbe2 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD2_Pin);
 8000c64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c68:	f000 fbde 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD3_Pin);
 8000c6c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c70:	f000 fbda 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD4_Pin);
 8000c74:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c78:	f000 fbd6 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f002 f8d4 	bl	8002e5c <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20030000 	.word	0x20030000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000118 	.word	0x20000118
 8000ce8:	20000268 	.word	0x20000268

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 f893 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc25 	bl	8000590 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d54:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8000d58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d5c:	20000268 	.word	0x20000268

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	@ (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f92b 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	200f      	movs	r0, #15
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe92 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f943 	bl	8001052 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f90b 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	2000011c 	.word	0x2000011c

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000011c 	.word	0x2000011c

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e177      	b.n	8001378 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8166 	bne.w	8001372 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80c0 	beq.w	8001372 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b66      	ldr	r3, [pc, #408]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a65      	ldr	r2, [pc, #404]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b63      	ldr	r3, [pc, #396]	@ (8001390 <HAL_GPIO_Init+0x324>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a61      	ldr	r2, [pc, #388]	@ (8001394 <HAL_GPIO_Init+0x328>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a58      	ldr	r2, [pc, #352]	@ (8001398 <HAL_GPIO_Init+0x32c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d037      	beq.n	80012aa <HAL_GPIO_Init+0x23e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a57      	ldr	r2, [pc, #348]	@ (800139c <HAL_GPIO_Init+0x330>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d031      	beq.n	80012a6 <HAL_GPIO_Init+0x23a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a56      	ldr	r2, [pc, #344]	@ (80013a0 <HAL_GPIO_Init+0x334>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d02b      	beq.n	80012a2 <HAL_GPIO_Init+0x236>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a55      	ldr	r2, [pc, #340]	@ (80013a4 <HAL_GPIO_Init+0x338>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x232>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a54      	ldr	r2, [pc, #336]	@ (80013a8 <HAL_GPIO_Init+0x33c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x22e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a53      	ldr	r2, [pc, #332]	@ (80013ac <HAL_GPIO_Init+0x340>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x22a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a52      	ldr	r2, [pc, #328]	@ (80013b0 <HAL_GPIO_Init+0x344>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x226>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a51      	ldr	r2, [pc, #324]	@ (80013b4 <HAL_GPIO_Init+0x348>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x222>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a50      	ldr	r2, [pc, #320]	@ (80013b8 <HAL_GPIO_Init+0x34c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x21e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4f      	ldr	r2, [pc, #316]	@ (80013bc <HAL_GPIO_Init+0x350>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x21a>
 8001282:	2309      	movs	r3, #9
 8001284:	e012      	b.n	80012ac <HAL_GPIO_Init+0x240>
 8001286:	230a      	movs	r3, #10
 8001288:	e010      	b.n	80012ac <HAL_GPIO_Init+0x240>
 800128a:	2308      	movs	r3, #8
 800128c:	e00e      	b.n	80012ac <HAL_GPIO_Init+0x240>
 800128e:	2307      	movs	r3, #7
 8001290:	e00c      	b.n	80012ac <HAL_GPIO_Init+0x240>
 8001292:	2306      	movs	r3, #6
 8001294:	e00a      	b.n	80012ac <HAL_GPIO_Init+0x240>
 8001296:	2305      	movs	r3, #5
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x240>
 800129a:	2304      	movs	r3, #4
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x240>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x240>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x240>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x240>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	@ (8001394 <HAL_GPIO_Init+0x328>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a34      	ldr	r2, [pc, #208]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <HAL_GPIO_Init+0x354>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f ae84 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40021400 	.word	0x40021400
 80013b0:	40021800 	.word	0x40021800
 80013b4:	40021c00 	.word	0x40021c00
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40022400 	.word	0x40022400
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e001      	b.n	80013e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fa8a 	bl	8000960 <HAL_GPIO_EXTI_Callback>
  }
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e267      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d075      	beq.n	8001562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001476:	4b88      	ldr	r3, [pc, #544]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b04      	cmp	r3, #4
 8001480:	d00c      	beq.n	800149c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001482:	4b85      	ldr	r3, [pc, #532]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148a:	2b08      	cmp	r3, #8
 800148c:	d112      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148e:	4b82      	ldr	r3, [pc, #520]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800149a:	d10b      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	4b7e      	ldr	r3, [pc, #504]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d05b      	beq.n	8001560 <HAL_RCC_OscConfig+0x108>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d157      	bne.n	8001560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e242      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x74>
 80014be:	4b76      	ldr	r3, [pc, #472]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a75      	ldr	r2, [pc, #468]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xb0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x98>
 80014d6:	4b70      	ldr	r3, [pc, #448]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6f      	ldr	r2, [pc, #444]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xb0>
 80014f0:	4b69      	ldr	r3, [pc, #420]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a68      	ldr	r2, [pc, #416]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b66      	ldr	r3, [pc, #408]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a65      	ldr	r2, [pc, #404]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fc8e 	bl	8000e30 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fc8a 	bl	8000e30 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e207      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b5b      	ldr	r3, [pc, #364]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xc0>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fc7a 	bl	8000e30 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fc76 	bl	8000e30 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1f3      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	4b51      	ldr	r3, [pc, #324]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0xe8>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d063      	beq.n	8001636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156e:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157a:	4b47      	ldr	r3, [pc, #284]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001582:	2b08      	cmp	r3, #8
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x152>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1c7      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4937      	ldr	r1, [pc, #220]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e03a      	b.n	8001636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b34      	ldr	r3, [pc, #208]	@ (800169c <HAL_RCC_OscConfig+0x244>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc2f 	bl	8000e30 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc2b 	bl	8000e30 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1a8      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4925      	ldr	r1, [pc, #148]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_RCC_OscConfig+0x244>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fc0e 	bl	8000e30 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fc0a 	bl	8000e30 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e187      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d036      	beq.n	80016b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d016      	beq.n	8001678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_RCC_OscConfig+0x248>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001650:	f7ff fbee 	bl	8000e30 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fbea 	bl	8000e30 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e167      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_RCC_OscConfig+0x240>)
 800166c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x200>
 8001676:	e01b      	b.n	80016b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_RCC_OscConfig+0x248>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff fbd7 	bl	8000e30 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001684:	e00e      	b.n	80016a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fbd3 	bl	8000e30 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d907      	bls.n	80016a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e150      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
 8001698:	40023800 	.word	0x40023800
 800169c:	42470000 	.word	0x42470000
 80016a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	4b88      	ldr	r3, [pc, #544]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ea      	bne.n	8001686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8097 	beq.w	80017ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b81      	ldr	r3, [pc, #516]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b7d      	ldr	r3, [pc, #500]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a7c      	ldr	r2, [pc, #496]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b7a      	ldr	r3, [pc, #488]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ea:	2301      	movs	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ee:	4b77      	ldr	r3, [pc, #476]	@ (80018cc <HAL_RCC_OscConfig+0x474>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d118      	bne.n	800172c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fa:	4b74      	ldr	r3, [pc, #464]	@ (80018cc <HAL_RCC_OscConfig+0x474>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a73      	ldr	r2, [pc, #460]	@ (80018cc <HAL_RCC_OscConfig+0x474>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb93 	bl	8000e30 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170e:	f7ff fb8f 	bl	8000e30 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e10c      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	4b6a      	ldr	r3, [pc, #424]	@ (80018cc <HAL_RCC_OscConfig+0x474>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x2ea>
 8001734:	4b64      	ldr	r3, [pc, #400]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001738:	4a63      	ldr	r2, [pc, #396]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001740:	e01c      	b.n	800177c <HAL_RCC_OscConfig+0x324>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x30c>
 800174a:	4b5f      	ldr	r3, [pc, #380]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174e:	4a5e      	ldr	r2, [pc, #376]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6713      	str	r3, [r2, #112]	@ 0x70
 8001756:	4b5c      	ldr	r3, [pc, #368]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175a:	4a5b      	ldr	r2, [pc, #364]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6713      	str	r3, [r2, #112]	@ 0x70
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x324>
 8001764:	4b58      	ldr	r3, [pc, #352]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001768:	4a57      	ldr	r2, [pc, #348]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001770:	4b55      	ldr	r3, [pc, #340]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001774:	4a54      	ldr	r2, [pc, #336]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d015      	beq.n	80017b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fb54 	bl	8000e30 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fb50 	bl	8000e30 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0cb      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	4b49      	ldr	r3, [pc, #292]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0ee      	beq.n	800178c <HAL_RCC_OscConfig+0x334>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fb3e 	bl	8000e30 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb3a 	bl	8000e30 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0b5      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	4b3e      	ldr	r3, [pc, #248]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ee      	bne.n	80017b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d105      	bne.n	80017ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e0:	4b39      	ldr	r3, [pc, #228]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	4a38      	ldr	r2, [pc, #224]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80a1 	beq.w	8001938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f6:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d05c      	beq.n	80018bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d141      	bne.n	800188e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b31      	ldr	r3, [pc, #196]	@ (80018d0 <HAL_RCC_OscConfig+0x478>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fb0e 	bl	8000e30 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fb0a 	bl	8000e30 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e087      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	019b      	lsls	r3, r3, #6
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	3b01      	subs	r3, #1
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	491b      	ldr	r1, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <HAL_RCC_OscConfig+0x478>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fae3 	bl	8000e30 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff fadf 	bl	8000e30 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e05c      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x416>
 800188c:	e054      	b.n	8001938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_RCC_OscConfig+0x478>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff facc 	bl	8000e30 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fac8 	bl	8000e30 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e045      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_RCC_OscConfig+0x470>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x444>
 80018ba:	e03d      	b.n	8001938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e038      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40007000 	.word	0x40007000
 80018d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x4ec>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d028      	beq.n	8001934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d121      	bne.n	8001934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d11a      	bne.n	8001934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001904:	4013      	ands	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800190a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190c:	4293      	cmp	r3, r2
 800190e:	d111      	bne.n	8001934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	3b01      	subs	r3, #1
 800191e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0cc      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b68      	ldr	r3, [pc, #416]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d90c      	bls.n	8001984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b65      	ldr	r3, [pc, #404]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b63      	ldr	r3, [pc, #396]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b8      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199c:	4b59      	ldr	r3, [pc, #356]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a58      	ldr	r2, [pc, #352]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a52      	ldr	r2, [pc, #328]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b50      	ldr	r3, [pc, #320]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	494d      	ldr	r1, [pc, #308]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d044      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e067      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b37      	ldr	r3, [pc, #220]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4934      	ldr	r1, [pc, #208]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7ff f9fa 	bl	8000e30 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f9f6 	bl	8000e30 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e04f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d20c      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e032      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4916      	ldr	r1, [pc, #88]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490e      	ldr	r1, [pc, #56]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ace:	f000 f821 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	490a      	ldr	r1, [pc, #40]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f95a 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00
 8001b04:	40023800 	.word	0x40023800
 8001b08:	0800376c 	.word	0x0800376c
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b18:	b090      	sub	sp, #64	@ 0x40
 8001b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b2c:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d00d      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x40>
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	f200 80a1 	bhi.w	8001c80 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x34>
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b46:	e09b      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001b4c:	e09b      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4e:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b52:	e098      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b54:	4b4f      	ldr	r3, [pc, #316]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d028      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	2200      	movs	r2, #0
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b80:	fb03 f201 	mul.w	r2, r3, r1
 8001b84:	2300      	movs	r3, #0
 8001b86:	fb00 f303 	mul.w	r3, r0, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a43      	ldr	r2, [pc, #268]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b94:	460a      	mov	r2, r1
 8001b96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b9a:	4413      	add	r3, r2
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	61fa      	str	r2, [r7, #28]
 8001ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001baa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bae:	f7fe fb77 	bl	80002a0 <__aeabi_uldivmod>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bba:	e053      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbc:	4b35      	ldr	r3, [pc, #212]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	617a      	str	r2, [r7, #20]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bce:	f04f 0b00 	mov.w	fp, #0
 8001bd2:	4652      	mov	r2, sl
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	f04f 0000 	mov.w	r0, #0
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	0159      	lsls	r1, r3, #5
 8001be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be4:	0150      	lsls	r0, r2, #5
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	ebb2 080a 	subs.w	r8, r2, sl
 8001bee:	eb63 090b 	sbc.w	r9, r3, fp
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c06:	ebb2 0408 	subs.w	r4, r2, r8
 8001c0a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	00eb      	lsls	r3, r5, #3
 8001c18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c1c:	00e2      	lsls	r2, r4, #3
 8001c1e:	4614      	mov	r4, r2
 8001c20:	461d      	mov	r5, r3
 8001c22:	eb14 030a 	adds.w	r3, r4, sl
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	eb45 030b 	adc.w	r3, r5, fp
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	028b      	lsls	r3, r1, #10
 8001c3e:	4621      	mov	r1, r4
 8001c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c44:	4621      	mov	r1, r4
 8001c46:	028a      	lsls	r2, r1, #10
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	60fa      	str	r2, [r7, #12]
 8001c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c58:	f7fe fb22 	bl	80002a0 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001c74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c7e:	e002      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3740      	adds	r7, #64	@ 0x40
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	00f42400 	.word	0x00f42400
 8001c9c:	017d7840 	.word	0x017d7840

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0a9b      	lsrs	r3, r3, #10
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	0800377c 	.word	0x0800377c

08001ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ce4:	f7ff ffdc 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0b5b      	lsrs	r3, r3, #13
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	0800377c 	.word	0x0800377c

08001d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e041      	b.n	8001d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe feee 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 fa7e 	bl	8002248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d001      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04e      	b.n	8001e5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d022      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dea:	d01d      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d018      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00e      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d009      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d010      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40000c00 	.word	0x40000c00
 8001e7c:	40010400 	.word	0x40010400
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40001800 	.word	0x40001800

08001e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d020      	beq.n	8001eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0202 	mvn.w	r2, #2
 8001ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f999 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f98b 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f99c 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d020      	beq.n	8001f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0204 	mvn.w	r2, #4
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f973 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f965 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f976 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d020      	beq.n	8001f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0208 	mvn.w	r2, #8
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f94d 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f93f 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f950 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d020      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0210 	mvn.w	r2, #16
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f927 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f919 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f92a 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0201 	mvn.w	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fc54 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fae4 	bl	80025e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8fb 	bl	8002232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0220 	mvn.w	r2, #32
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fab6 	bl	80025cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_TIM_ConfigClockSource+0x1c>
 8002080:	2302      	movs	r3, #2
 8002082:	e0b4      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x186>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020bc:	d03e      	beq.n	800213c <HAL_TIM_ConfigClockSource+0xd4>
 80020be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020c2:	f200 8087 	bhi.w	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ca:	f000 8086 	beq.w	80021da <HAL_TIM_ConfigClockSource+0x172>
 80020ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d2:	d87f      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b70      	cmp	r3, #112	@ 0x70
 80020d6:	d01a      	beq.n	800210e <HAL_TIM_ConfigClockSource+0xa6>
 80020d8:	2b70      	cmp	r3, #112	@ 0x70
 80020da:	d87b      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b60      	cmp	r3, #96	@ 0x60
 80020de:	d050      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x11a>
 80020e0:	2b60      	cmp	r3, #96	@ 0x60
 80020e2:	d877      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020e4:	2b50      	cmp	r3, #80	@ 0x50
 80020e6:	d03c      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0xfa>
 80020e8:	2b50      	cmp	r3, #80	@ 0x50
 80020ea:	d873      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020ec:	2b40      	cmp	r3, #64	@ 0x40
 80020ee:	d058      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x13a>
 80020f0:	2b40      	cmp	r3, #64	@ 0x40
 80020f2:	d86f      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020f4:	2b30      	cmp	r3, #48	@ 0x30
 80020f6:	d064      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 80020f8:	2b30      	cmp	r3, #48	@ 0x30
 80020fa:	d86b      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d060      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002100:	2b20      	cmp	r3, #32
 8002102:	d867      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05c      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002108:	2b10      	cmp	r3, #16
 800210a:	d05a      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x15a>
 800210c:	e062      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800211e:	f000 f9b9 	bl	8002494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	609a      	str	r2, [r3, #8]
      break;
 800213a:	e04f      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800214c:	f000 f9a2 	bl	8002494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800215e:	609a      	str	r2, [r3, #8]
      break;
 8002160:	e03c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	461a      	mov	r2, r3
 8002170:	f000 f916 	bl	80023a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2150      	movs	r1, #80	@ 0x50
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f96f 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002180:	e02c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800218e:	461a      	mov	r2, r3
 8002190:	f000 f935 	bl	80023fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2160      	movs	r1, #96	@ 0x60
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f95f 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 80021a0:	e01c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ae:	461a      	mov	r2, r3
 80021b0:	f000 f8f6 	bl	80023a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2140      	movs	r1, #64	@ 0x40
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f94f 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 80021c0:	e00c      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f000 f946 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 80021d2:	e003      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      break;
 80021d8:	e000      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <TIM_Base_SetConfig+0x12c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002266:	d00f      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a43      	ldr	r2, [pc, #268]	@ (8002378 <TIM_Base_SetConfig+0x130>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00b      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a42      	ldr	r2, [pc, #264]	@ (800237c <TIM_Base_SetConfig+0x134>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a41      	ldr	r2, [pc, #260]	@ (8002380 <TIM_Base_SetConfig+0x138>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <TIM_Base_SetConfig+0x13c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d108      	bne.n	800229a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a35      	ldr	r2, [pc, #212]	@ (8002374 <TIM_Base_SetConfig+0x12c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a8:	d027      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a32      	ldr	r2, [pc, #200]	@ (8002378 <TIM_Base_SetConfig+0x130>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d023      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a31      	ldr	r2, [pc, #196]	@ (800237c <TIM_Base_SetConfig+0x134>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <TIM_Base_SetConfig+0x138>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002384 <TIM_Base_SetConfig+0x13c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d017      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002388 <TIM_Base_SetConfig+0x140>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2d      	ldr	r2, [pc, #180]	@ (800238c <TIM_Base_SetConfig+0x144>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002390 <TIM_Base_SetConfig+0x148>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <TIM_Base_SetConfig+0x14c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <TIM_Base_SetConfig+0x150>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a29      	ldr	r2, [pc, #164]	@ (800239c <TIM_Base_SetConfig+0x154>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a10      	ldr	r2, [pc, #64]	@ (8002374 <TIM_Base_SetConfig+0x12c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0xf8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <TIM_Base_SetConfig+0x13c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f023 0201 	bic.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]
  }
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014000 	.word	0x40014000
 800238c:	40014400 	.word	0x40014400
 8002390:	40014800 	.word	0x40014800
 8002394:	40001800 	.word	0x40001800
 8002398:	40001c00 	.word	0x40001c00
 800239c:	40002000 	.word	0x40002000

080023a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0201 	bic.w	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 030a 	bic.w	r3, r3, #10
 80023dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	621a      	str	r2, [r3, #32]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f023 0210 	bic.w	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	031b      	lsls	r3, r3, #12
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800243a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	621a      	str	r2, [r3, #32]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	f043 0307 	orr.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	021a      	lsls	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e05a      	b.n	80025a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002538:	d01d      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d018      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1a      	ldr	r2, [pc, #104]	@ (80025bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d00e      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a18      	ldr	r2, [pc, #96]	@ (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a15      	ldr	r2, [pc, #84]	@ (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10c      	bne.n	8002590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4313      	orrs	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40010400 	.word	0x40010400
 80025c4:	40014000 	.word	0x40014000
 80025c8:	40001800 	.word	0x40001800

080025cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fa9a 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f973 	bl	8002924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	@ 0x28
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d175      	bne.n	80027a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_UART_Transmit+0x2c>
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e06e      	b.n	80027a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2221      	movs	r2, #33	@ 0x21
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d2:	f7fe fbad 	bl	8000e30 <HAL_GetTick>
 80026d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ec:	d108      	bne.n	8002700 <HAL_UART_Transmit+0x6c>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e003      	b.n	8002708 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002708:	e02e      	b.n	8002768 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f848 	bl	80027aa <UART_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e03a      	b.n	80027a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	3302      	adds	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e007      	b.n	800275a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3301      	adds	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1cb      	bne.n	800270a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2140      	movs	r1, #64	@ 0x40
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f814 	bl	80027aa <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e006      	b.n	80027a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ba:	e03b      	b.n	8002834 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d037      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c4:	f7fe fb34 	bl	8000e30 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <UART_WaitOnFlagUntilTimeout+0x30>
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e03a      	b.n	8002854 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b80      	cmp	r3, #128	@ 0x80
 80027f0:	d020      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	d01d      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b08      	cmp	r3, #8
 8002804:	d116      	bne.n	8002834 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f81d 	bl	800285c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2208      	movs	r2, #8
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e00f      	b.n	8002854 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	429a      	cmp	r2, r3
 8002850:	d0b4      	beq.n	80027bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b095      	sub	sp, #84	@ 0x54
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286e:	e853 3f00 	ldrex	r3, [r3]
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800287a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002884:	643a      	str	r2, [r7, #64]	@ 0x40
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800288a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800288c:	e841 2300 	strex	r3, r2, [r1]
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e5      	bne.n	8002864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3314      	adds	r3, #20
 80028b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d119      	bne.n	8002908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f023 0310 	bic.w	r3, r3, #16
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f4:	61ba      	str	r2, [r7, #24]
 80028f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6979      	ldr	r1, [r7, #20]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	613b      	str	r3, [r7, #16]
   return(result);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e5      	bne.n	80028d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002916:	bf00      	nop
 8002918:	3754      	adds	r7, #84	@ 0x54
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002928:	b0c0      	sub	sp, #256	@ 0x100
 800292a:	af00      	add	r7, sp, #0
 800292c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002940:	68d9      	ldr	r1, [r3, #12]
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	ea40 0301 	orr.w	r3, r0, r1
 800294c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	431a      	orrs	r2, r3
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	431a      	orrs	r2, r3
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800297c:	f021 010c 	bic.w	r1, r1, #12
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800298a:	430b      	orrs	r3, r1
 800298c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	6999      	ldr	r1, [r3, #24]
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	ea40 0301 	orr.w	r3, r0, r1
 80029aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf0 <UART_SetConfig+0x2cc>)
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d005      	beq.n	80029c4 <UART_SetConfig+0xa0>
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf4 <UART_SetConfig+0x2d0>)
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d104      	bne.n	80029ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c4:	f7ff f98c 	bl	8001ce0 <HAL_RCC_GetPCLK2Freq>
 80029c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029cc:	e003      	b.n	80029d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ce:	f7ff f973 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80029d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e0:	f040 810c 	bne.w	8002bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029f6:	4622      	mov	r2, r4
 80029f8:	462b      	mov	r3, r5
 80029fa:	1891      	adds	r1, r2, r2
 80029fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029fe:	415b      	adcs	r3, r3
 8002a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a06:	4621      	mov	r1, r4
 8002a08:	eb12 0801 	adds.w	r8, r2, r1
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	eb43 0901 	adc.w	r9, r3, r1
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a26:	4690      	mov	r8, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	4623      	mov	r3, r4
 8002a2c:	eb18 0303 	adds.w	r3, r8, r3
 8002a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a34:	462b      	mov	r3, r5
 8002a36:	eb49 0303 	adc.w	r3, r9, r3
 8002a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a52:	460b      	mov	r3, r1
 8002a54:	18db      	adds	r3, r3, r3
 8002a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a58:	4613      	mov	r3, r2
 8002a5a:	eb42 0303 	adc.w	r3, r2, r3
 8002a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a68:	f7fd fc1a 	bl	80002a0 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4b61      	ldr	r3, [pc, #388]	@ (8002bf8 <UART_SetConfig+0x2d4>)
 8002a72:	fba3 2302 	umull	r2, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	011c      	lsls	r4, r3, #4
 8002a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a94:	415b      	adcs	r3, r3
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002abc:	4692      	mov	sl, r2
 8002abe:	469b      	mov	fp, r3
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aca:	464b      	mov	r3, r9
 8002acc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	18db      	adds	r3, r3, r3
 8002aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aee:	4613      	mov	r3, r2
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002afe:	f7fd fbcf 	bl	80002a0 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <UART_SetConfig+0x2d4>)
 8002b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2264      	movs	r2, #100	@ 0x64
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	1acb      	subs	r3, r1, r3
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b1e:	4b36      	ldr	r3, [pc, #216]	@ (8002bf8 <UART_SetConfig+0x2d4>)
 8002b20:	fba3 2302 	umull	r2, r3, r3, r2
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b2c:	441c      	add	r4, r3
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b50:	4641      	mov	r1, r8
 8002b52:	1851      	adds	r1, r2, r1
 8002b54:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b56:	4649      	mov	r1, r9
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b68:	4659      	mov	r1, fp
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4651      	mov	r1, sl
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b84:	464b      	mov	r3, r9
 8002b86:	460a      	mov	r2, r1
 8002b88:	eb42 0303 	adc.w	r3, r2, r3
 8002b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	18db      	adds	r3, r3, r3
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002baa:	4613      	mov	r3, r2
 8002bac:	eb42 0303 	adc.w	r3, r2, r3
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bba:	f7fd fb71 	bl	80002a0 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <UART_SetConfig+0x2d4>)
 8002bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	2164      	movs	r1, #100	@ 0x64
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	3332      	adds	r3, #50	@ 0x32
 8002bd6:	4a08      	ldr	r2, [pc, #32]	@ (8002bf8 <UART_SetConfig+0x2d4>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	f003 0207 	and.w	r2, r3, #7
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4422      	add	r2, r4
 8002bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bec:	e106      	b.n	8002dfc <UART_SetConfig+0x4d8>
 8002bee:	bf00      	nop
 8002bf0:	40011000 	.word	0x40011000
 8002bf4:	40011400 	.word	0x40011400
 8002bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c0e:	4642      	mov	r2, r8
 8002c10:	464b      	mov	r3, r9
 8002c12:	1891      	adds	r1, r2, r2
 8002c14:	6239      	str	r1, [r7, #32]
 8002c16:	415b      	adcs	r3, r3
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c1e:	4641      	mov	r1, r8
 8002c20:	1854      	adds	r4, r2, r1
 8002c22:	4649      	mov	r1, r9
 8002c24:	eb43 0501 	adc.w	r5, r3, r1
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	00eb      	lsls	r3, r5, #3
 8002c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	18e3      	adds	r3, r4, r3
 8002c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c44:	464b      	mov	r3, r9
 8002c46:	eb45 0303 	adc.w	r3, r5, r3
 8002c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	008b      	lsls	r3, r1, #2
 8002c6e:	4621      	mov	r1, r4
 8002c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c74:	4621      	mov	r1, r4
 8002c76:	008a      	lsls	r2, r1, #2
 8002c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c7c:	f7fd fb10 	bl	80002a0 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4b60      	ldr	r3, [pc, #384]	@ (8002e08 <UART_SetConfig+0x4e4>)
 8002c86:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	011c      	lsls	r4, r3, #4
 8002c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	1891      	adds	r1, r2, r2
 8002ca6:	61b9      	str	r1, [r7, #24]
 8002ca8:	415b      	adcs	r3, r3
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	1851      	adds	r1, r2, r1
 8002cb4:	6139      	str	r1, [r7, #16]
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	414b      	adcs	r3, r1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	00cb      	lsls	r3, r1, #3
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	00ca      	lsls	r2, r1, #3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4642      	mov	r2, r8
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce4:	464b      	mov	r3, r9
 8002ce6:	460a      	mov	r2, r1
 8002ce8:	eb42 0303 	adc.w	r3, r2, r3
 8002cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d08:	4649      	mov	r1, r9
 8002d0a:	008b      	lsls	r3, r1, #2
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d12:	4641      	mov	r1, r8
 8002d14:	008a      	lsls	r2, r1, #2
 8002d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d1a:	f7fd fac1 	bl	80002a0 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <UART_SetConfig+0x4e4>)
 8002d26:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2264      	movs	r2, #100	@ 0x64
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	1acb      	subs	r3, r1, r3
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	3332      	adds	r3, #50	@ 0x32
 8002d38:	4a33      	ldr	r2, [pc, #204]	@ (8002e08 <UART_SetConfig+0x4e4>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d44:	441c      	add	r4, r3
 8002d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d64:	4641      	mov	r1, r8
 8002d66:	1851      	adds	r1, r2, r1
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	414b      	adcs	r3, r1
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	00cb      	lsls	r3, r1, #3
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d86:	4651      	mov	r1, sl
 8002d88:	00ca      	lsls	r2, r1, #3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4642      	mov	r2, r8
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d96:	464b      	mov	r3, r9
 8002d98:	460a      	mov	r2, r1
 8002d9a:	eb42 0303 	adc.w	r3, r2, r3
 8002d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002daa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002db8:	4649      	mov	r1, r9
 8002dba:	008b      	lsls	r3, r1, #2
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	008a      	lsls	r2, r1, #2
 8002dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dca:	f7fd fa69 	bl	80002a0 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <UART_SetConfig+0x4e4>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	@ 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	3332      	adds	r3, #50	@ 0x32
 8002de6:	4a08      	ldr	r2, [pc, #32]	@ (8002e08 <UART_SetConfig+0x4e4>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4422      	add	r2, r4
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e02:	46bd      	mov	sp, r7
 8002e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e08:	51eb851f 	.word	0x51eb851f

08002e0c <siprintf>:
 8002e0c:	b40e      	push	{r1, r2, r3}
 8002e0e:	b500      	push	{lr}
 8002e10:	b09c      	sub	sp, #112	@ 0x70
 8002e12:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e14:	9002      	str	r0, [sp, #8]
 8002e16:	9006      	str	r0, [sp, #24]
 8002e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e1c:	4809      	ldr	r0, [pc, #36]	@ (8002e44 <siprintf+0x38>)
 8002e1e:	9107      	str	r1, [sp, #28]
 8002e20:	9104      	str	r1, [sp, #16]
 8002e22:	4909      	ldr	r1, [pc, #36]	@ (8002e48 <siprintf+0x3c>)
 8002e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e28:	9105      	str	r1, [sp, #20]
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	a902      	add	r1, sp, #8
 8002e30:	f000 f994 	bl	800315c <_svfiprintf_r>
 8002e34:	9b02      	ldr	r3, [sp, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	b01c      	add	sp, #112	@ 0x70
 8002e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e40:	b003      	add	sp, #12
 8002e42:	4770      	bx	lr
 8002e44:	2000000c 	.word	0x2000000c
 8002e48:	ffff0208 	.word	0xffff0208

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <__errno>:
 8002e5c:	4b01      	ldr	r3, [pc, #4]	@ (8002e64 <__errno+0x8>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	2000000c 	.word	0x2000000c

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ea0 <__libc_init_array+0x38>)
 8002e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8002ea4 <__libc_init_array+0x3c>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	2600      	movs	r6, #0
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	4d0b      	ldr	r5, [pc, #44]	@ (8002ea8 <__libc_init_array+0x40>)
 8002e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8002eac <__libc_init_array+0x44>)
 8002e7c:	f000 fc66 	bl	800374c <_init>
 8002e80:	1b64      	subs	r4, r4, r5
 8002e82:	10a4      	asrs	r4, r4, #2
 8002e84:	2600      	movs	r6, #0
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	080037c0 	.word	0x080037c0
 8002ea4:	080037c0 	.word	0x080037c0
 8002ea8:	080037c0 	.word	0x080037c0
 8002eac:	080037c4 	.word	0x080037c4

08002eb0 <__retarget_lock_acquire_recursive>:
 8002eb0:	4770      	bx	lr

08002eb2 <__retarget_lock_release_recursive>:
 8002eb2:	4770      	bx	lr

08002eb4 <_free_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	d041      	beq.n	8002f40 <_free_r+0x8c>
 8002ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec0:	1f0c      	subs	r4, r1, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bfb8      	it	lt
 8002ec6:	18e4      	addlt	r4, r4, r3
 8002ec8:	f000 f8e0 	bl	800308c <__malloc_lock>
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <_free_r+0x90>)
 8002ece:	6813      	ldr	r3, [r2, #0]
 8002ed0:	b933      	cbnz	r3, 8002ee0 <_free_r+0x2c>
 8002ed2:	6063      	str	r3, [r4, #4]
 8002ed4:	6014      	str	r4, [r2, #0]
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002edc:	f000 b8dc 	b.w	8003098 <__malloc_unlock>
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	d908      	bls.n	8002ef6 <_free_r+0x42>
 8002ee4:	6820      	ldr	r0, [r4, #0]
 8002ee6:	1821      	adds	r1, r4, r0
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	bf01      	itttt	eq
 8002eec:	6819      	ldreq	r1, [r3, #0]
 8002eee:	685b      	ldreq	r3, [r3, #4]
 8002ef0:	1809      	addeq	r1, r1, r0
 8002ef2:	6021      	streq	r1, [r4, #0]
 8002ef4:	e7ed      	b.n	8002ed2 <_free_r+0x1e>
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b10b      	cbz	r3, 8002f00 <_free_r+0x4c>
 8002efc:	42a3      	cmp	r3, r4
 8002efe:	d9fa      	bls.n	8002ef6 <_free_r+0x42>
 8002f00:	6811      	ldr	r1, [r2, #0]
 8002f02:	1850      	adds	r0, r2, r1
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	d10b      	bne.n	8002f20 <_free_r+0x6c>
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	4401      	add	r1, r0
 8002f0c:	1850      	adds	r0, r2, r1
 8002f0e:	4283      	cmp	r3, r0
 8002f10:	6011      	str	r1, [r2, #0]
 8002f12:	d1e0      	bne.n	8002ed6 <_free_r+0x22>
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6053      	str	r3, [r2, #4]
 8002f1a:	4408      	add	r0, r1
 8002f1c:	6010      	str	r0, [r2, #0]
 8002f1e:	e7da      	b.n	8002ed6 <_free_r+0x22>
 8002f20:	d902      	bls.n	8002f28 <_free_r+0x74>
 8002f22:	230c      	movs	r3, #12
 8002f24:	602b      	str	r3, [r5, #0]
 8002f26:	e7d6      	b.n	8002ed6 <_free_r+0x22>
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	1821      	adds	r1, r4, r0
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	bf04      	itt	eq
 8002f30:	6819      	ldreq	r1, [r3, #0]
 8002f32:	685b      	ldreq	r3, [r3, #4]
 8002f34:	6063      	str	r3, [r4, #4]
 8002f36:	bf04      	itt	eq
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	6054      	str	r4, [r2, #4]
 8002f3e:	e7ca      	b.n	8002ed6 <_free_r+0x22>
 8002f40:	bd38      	pop	{r3, r4, r5, pc}
 8002f42:	bf00      	nop
 8002f44:	20000264 	.word	0x20000264

08002f48 <sbrk_aligned>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8002f88 <sbrk_aligned+0x40>)
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	6831      	ldr	r1, [r6, #0]
 8002f50:	4605      	mov	r5, r0
 8002f52:	b911      	cbnz	r1, 8002f5a <sbrk_aligned+0x12>
 8002f54:	f000 fba6 	bl	80036a4 <_sbrk_r>
 8002f58:	6030      	str	r0, [r6, #0]
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 fba1 	bl	80036a4 <_sbrk_r>
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	d103      	bne.n	8002f6e <sbrk_aligned+0x26>
 8002f66:	f04f 34ff 	mov.w	r4, #4294967295
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
 8002f6e:	1cc4      	adds	r4, r0, #3
 8002f70:	f024 0403 	bic.w	r4, r4, #3
 8002f74:	42a0      	cmp	r0, r4
 8002f76:	d0f8      	beq.n	8002f6a <sbrk_aligned+0x22>
 8002f78:	1a21      	subs	r1, r4, r0
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 fb92 	bl	80036a4 <_sbrk_r>
 8002f80:	3001      	adds	r0, #1
 8002f82:	d1f2      	bne.n	8002f6a <sbrk_aligned+0x22>
 8002f84:	e7ef      	b.n	8002f66 <sbrk_aligned+0x1e>
 8002f86:	bf00      	nop
 8002f88:	20000260 	.word	0x20000260

08002f8c <_malloc_r>:
 8002f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f90:	1ccd      	adds	r5, r1, #3
 8002f92:	f025 0503 	bic.w	r5, r5, #3
 8002f96:	3508      	adds	r5, #8
 8002f98:	2d0c      	cmp	r5, #12
 8002f9a:	bf38      	it	cc
 8002f9c:	250c      	movcc	r5, #12
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	4606      	mov	r6, r0
 8002fa2:	db01      	blt.n	8002fa8 <_malloc_r+0x1c>
 8002fa4:	42a9      	cmp	r1, r5
 8002fa6:	d904      	bls.n	8002fb2 <_malloc_r+0x26>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	6033      	str	r3, [r6, #0]
 8002fac:	2000      	movs	r0, #0
 8002fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003088 <_malloc_r+0xfc>
 8002fb6:	f000 f869 	bl	800308c <__malloc_lock>
 8002fba:	f8d8 3000 	ldr.w	r3, [r8]
 8002fbe:	461c      	mov	r4, r3
 8002fc0:	bb44      	cbnz	r4, 8003014 <_malloc_r+0x88>
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f7ff ffbf 	bl	8002f48 <sbrk_aligned>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	4604      	mov	r4, r0
 8002fce:	d158      	bne.n	8003082 <_malloc_r+0xf6>
 8002fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8002fd4:	4627      	mov	r7, r4
 8002fd6:	2f00      	cmp	r7, #0
 8002fd8:	d143      	bne.n	8003062 <_malloc_r+0xd6>
 8002fda:	2c00      	cmp	r4, #0
 8002fdc:	d04b      	beq.n	8003076 <_malloc_r+0xea>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	4639      	mov	r1, r7
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	eb04 0903 	add.w	r9, r4, r3
 8002fe8:	f000 fb5c 	bl	80036a4 <_sbrk_r>
 8002fec:	4581      	cmp	r9, r0
 8002fee:	d142      	bne.n	8003076 <_malloc_r+0xea>
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	1a6d      	subs	r5, r5, r1
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f7ff ffa6 	bl	8002f48 <sbrk_aligned>
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d03a      	beq.n	8003076 <_malloc_r+0xea>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	442b      	add	r3, r5
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	f8d8 3000 	ldr.w	r3, [r8]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	bb62      	cbnz	r2, 8003068 <_malloc_r+0xdc>
 800300e:	f8c8 7000 	str.w	r7, [r8]
 8003012:	e00f      	b.n	8003034 <_malloc_r+0xa8>
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	1b52      	subs	r2, r2, r5
 8003018:	d420      	bmi.n	800305c <_malloc_r+0xd0>
 800301a:	2a0b      	cmp	r2, #11
 800301c:	d917      	bls.n	800304e <_malloc_r+0xc2>
 800301e:	1961      	adds	r1, r4, r5
 8003020:	42a3      	cmp	r3, r4
 8003022:	6025      	str	r5, [r4, #0]
 8003024:	bf18      	it	ne
 8003026:	6059      	strne	r1, [r3, #4]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	bf08      	it	eq
 800302c:	f8c8 1000 	streq.w	r1, [r8]
 8003030:	5162      	str	r2, [r4, r5]
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	4630      	mov	r0, r6
 8003036:	f000 f82f 	bl	8003098 <__malloc_unlock>
 800303a:	f104 000b 	add.w	r0, r4, #11
 800303e:	1d23      	adds	r3, r4, #4
 8003040:	f020 0007 	bic.w	r0, r0, #7
 8003044:	1ac2      	subs	r2, r0, r3
 8003046:	bf1c      	itt	ne
 8003048:	1a1b      	subne	r3, r3, r0
 800304a:	50a3      	strne	r3, [r4, r2]
 800304c:	e7af      	b.n	8002fae <_malloc_r+0x22>
 800304e:	6862      	ldr	r2, [r4, #4]
 8003050:	42a3      	cmp	r3, r4
 8003052:	bf0c      	ite	eq
 8003054:	f8c8 2000 	streq.w	r2, [r8]
 8003058:	605a      	strne	r2, [r3, #4]
 800305a:	e7eb      	b.n	8003034 <_malloc_r+0xa8>
 800305c:	4623      	mov	r3, r4
 800305e:	6864      	ldr	r4, [r4, #4]
 8003060:	e7ae      	b.n	8002fc0 <_malloc_r+0x34>
 8003062:	463c      	mov	r4, r7
 8003064:	687f      	ldr	r7, [r7, #4]
 8003066:	e7b6      	b.n	8002fd6 <_malloc_r+0x4a>
 8003068:	461a      	mov	r2, r3
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	42a3      	cmp	r3, r4
 800306e:	d1fb      	bne.n	8003068 <_malloc_r+0xdc>
 8003070:	2300      	movs	r3, #0
 8003072:	6053      	str	r3, [r2, #4]
 8003074:	e7de      	b.n	8003034 <_malloc_r+0xa8>
 8003076:	230c      	movs	r3, #12
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	4630      	mov	r0, r6
 800307c:	f000 f80c 	bl	8003098 <__malloc_unlock>
 8003080:	e794      	b.n	8002fac <_malloc_r+0x20>
 8003082:	6005      	str	r5, [r0, #0]
 8003084:	e7d6      	b.n	8003034 <_malloc_r+0xa8>
 8003086:	bf00      	nop
 8003088:	20000264 	.word	0x20000264

0800308c <__malloc_lock>:
 800308c:	4801      	ldr	r0, [pc, #4]	@ (8003094 <__malloc_lock+0x8>)
 800308e:	f7ff bf0f 	b.w	8002eb0 <__retarget_lock_acquire_recursive>
 8003092:	bf00      	nop
 8003094:	2000025c 	.word	0x2000025c

08003098 <__malloc_unlock>:
 8003098:	4801      	ldr	r0, [pc, #4]	@ (80030a0 <__malloc_unlock+0x8>)
 800309a:	f7ff bf0a 	b.w	8002eb2 <__retarget_lock_release_recursive>
 800309e:	bf00      	nop
 80030a0:	2000025c 	.word	0x2000025c

080030a4 <__ssputs_r>:
 80030a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	688e      	ldr	r6, [r1, #8]
 80030aa:	461f      	mov	r7, r3
 80030ac:	42be      	cmp	r6, r7
 80030ae:	680b      	ldr	r3, [r1, #0]
 80030b0:	4682      	mov	sl, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	4690      	mov	r8, r2
 80030b6:	d82d      	bhi.n	8003114 <__ssputs_r+0x70>
 80030b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030c0:	d026      	beq.n	8003110 <__ssputs_r+0x6c>
 80030c2:	6965      	ldr	r5, [r4, #20]
 80030c4:	6909      	ldr	r1, [r1, #16]
 80030c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ca:	eba3 0901 	sub.w	r9, r3, r1
 80030ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030d2:	1c7b      	adds	r3, r7, #1
 80030d4:	444b      	add	r3, r9
 80030d6:	106d      	asrs	r5, r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	bf38      	it	cc
 80030dc:	461d      	movcc	r5, r3
 80030de:	0553      	lsls	r3, r2, #21
 80030e0:	d527      	bpl.n	8003132 <__ssputs_r+0x8e>
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7ff ff52 	bl	8002f8c <_malloc_r>
 80030e8:	4606      	mov	r6, r0
 80030ea:	b360      	cbz	r0, 8003146 <__ssputs_r+0xa2>
 80030ec:	6921      	ldr	r1, [r4, #16]
 80030ee:	464a      	mov	r2, r9
 80030f0:	f000 fae8 	bl	80036c4 <memcpy>
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fe:	81a3      	strh	r3, [r4, #12]
 8003100:	6126      	str	r6, [r4, #16]
 8003102:	6165      	str	r5, [r4, #20]
 8003104:	444e      	add	r6, r9
 8003106:	eba5 0509 	sub.w	r5, r5, r9
 800310a:	6026      	str	r6, [r4, #0]
 800310c:	60a5      	str	r5, [r4, #8]
 800310e:	463e      	mov	r6, r7
 8003110:	42be      	cmp	r6, r7
 8003112:	d900      	bls.n	8003116 <__ssputs_r+0x72>
 8003114:	463e      	mov	r6, r7
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	4632      	mov	r2, r6
 800311a:	4641      	mov	r1, r8
 800311c:	f000 faa8 	bl	8003670 <memmove>
 8003120:	68a3      	ldr	r3, [r4, #8]
 8003122:	1b9b      	subs	r3, r3, r6
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	4433      	add	r3, r6
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	2000      	movs	r0, #0
 800312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003132:	462a      	mov	r2, r5
 8003134:	f000 fad4 	bl	80036e0 <_realloc_r>
 8003138:	4606      	mov	r6, r0
 800313a:	2800      	cmp	r0, #0
 800313c:	d1e0      	bne.n	8003100 <__ssputs_r+0x5c>
 800313e:	6921      	ldr	r1, [r4, #16]
 8003140:	4650      	mov	r0, sl
 8003142:	f7ff feb7 	bl	8002eb4 <_free_r>
 8003146:	230c      	movs	r3, #12
 8003148:	f8ca 3000 	str.w	r3, [sl]
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003152:	81a3      	strh	r3, [r4, #12]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	e7e9      	b.n	800312e <__ssputs_r+0x8a>
	...

0800315c <_svfiprintf_r>:
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	4698      	mov	r8, r3
 8003162:	898b      	ldrh	r3, [r1, #12]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	b09d      	sub	sp, #116	@ 0x74
 8003168:	4607      	mov	r7, r0
 800316a:	460d      	mov	r5, r1
 800316c:	4614      	mov	r4, r2
 800316e:	d510      	bpl.n	8003192 <_svfiprintf_r+0x36>
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	b973      	cbnz	r3, 8003192 <_svfiprintf_r+0x36>
 8003174:	2140      	movs	r1, #64	@ 0x40
 8003176:	f7ff ff09 	bl	8002f8c <_malloc_r>
 800317a:	6028      	str	r0, [r5, #0]
 800317c:	6128      	str	r0, [r5, #16]
 800317e:	b930      	cbnz	r0, 800318e <_svfiprintf_r+0x32>
 8003180:	230c      	movs	r3, #12
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	b01d      	add	sp, #116	@ 0x74
 800318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318e:	2340      	movs	r3, #64	@ 0x40
 8003190:	616b      	str	r3, [r5, #20]
 8003192:	2300      	movs	r3, #0
 8003194:	9309      	str	r3, [sp, #36]	@ 0x24
 8003196:	2320      	movs	r3, #32
 8003198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800319c:	f8cd 800c 	str.w	r8, [sp, #12]
 80031a0:	2330      	movs	r3, #48	@ 0x30
 80031a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003340 <_svfiprintf_r+0x1e4>
 80031a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031aa:	f04f 0901 	mov.w	r9, #1
 80031ae:	4623      	mov	r3, r4
 80031b0:	469a      	mov	sl, r3
 80031b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031b6:	b10a      	cbz	r2, 80031bc <_svfiprintf_r+0x60>
 80031b8:	2a25      	cmp	r2, #37	@ 0x25
 80031ba:	d1f9      	bne.n	80031b0 <_svfiprintf_r+0x54>
 80031bc:	ebba 0b04 	subs.w	fp, sl, r4
 80031c0:	d00b      	beq.n	80031da <_svfiprintf_r+0x7e>
 80031c2:	465b      	mov	r3, fp
 80031c4:	4622      	mov	r2, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	4638      	mov	r0, r7
 80031ca:	f7ff ff6b 	bl	80030a4 <__ssputs_r>
 80031ce:	3001      	adds	r0, #1
 80031d0:	f000 80a7 	beq.w	8003322 <_svfiprintf_r+0x1c6>
 80031d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031d6:	445a      	add	r2, fp
 80031d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80031da:	f89a 3000 	ldrb.w	r3, [sl]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 809f 	beq.w	8003322 <_svfiprintf_r+0x1c6>
 80031e4:	2300      	movs	r3, #0
 80031e6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ee:	f10a 0a01 	add.w	sl, sl, #1
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	9307      	str	r3, [sp, #28]
 80031f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80031fc:	4654      	mov	r4, sl
 80031fe:	2205      	movs	r2, #5
 8003200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003204:	484e      	ldr	r0, [pc, #312]	@ (8003340 <_svfiprintf_r+0x1e4>)
 8003206:	f7fc fffb 	bl	8000200 <memchr>
 800320a:	9a04      	ldr	r2, [sp, #16]
 800320c:	b9d8      	cbnz	r0, 8003246 <_svfiprintf_r+0xea>
 800320e:	06d0      	lsls	r0, r2, #27
 8003210:	bf44      	itt	mi
 8003212:	2320      	movmi	r3, #32
 8003214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003218:	0711      	lsls	r1, r2, #28
 800321a:	bf44      	itt	mi
 800321c:	232b      	movmi	r3, #43	@ 0x2b
 800321e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003222:	f89a 3000 	ldrb.w	r3, [sl]
 8003226:	2b2a      	cmp	r3, #42	@ 0x2a
 8003228:	d015      	beq.n	8003256 <_svfiprintf_r+0xfa>
 800322a:	9a07      	ldr	r2, [sp, #28]
 800322c:	4654      	mov	r4, sl
 800322e:	2000      	movs	r0, #0
 8003230:	f04f 0c0a 	mov.w	ip, #10
 8003234:	4621      	mov	r1, r4
 8003236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800323a:	3b30      	subs	r3, #48	@ 0x30
 800323c:	2b09      	cmp	r3, #9
 800323e:	d94b      	bls.n	80032d8 <_svfiprintf_r+0x17c>
 8003240:	b1b0      	cbz	r0, 8003270 <_svfiprintf_r+0x114>
 8003242:	9207      	str	r2, [sp, #28]
 8003244:	e014      	b.n	8003270 <_svfiprintf_r+0x114>
 8003246:	eba0 0308 	sub.w	r3, r0, r8
 800324a:	fa09 f303 	lsl.w	r3, r9, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	46a2      	mov	sl, r4
 8003254:	e7d2      	b.n	80031fc <_svfiprintf_r+0xa0>
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	1d19      	adds	r1, r3, #4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	9103      	str	r1, [sp, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfbb      	ittet	lt
 8003262:	425b      	neglt	r3, r3
 8003264:	f042 0202 	orrlt.w	r2, r2, #2
 8003268:	9307      	strge	r3, [sp, #28]
 800326a:	9307      	strlt	r3, [sp, #28]
 800326c:	bfb8      	it	lt
 800326e:	9204      	strlt	r2, [sp, #16]
 8003270:	7823      	ldrb	r3, [r4, #0]
 8003272:	2b2e      	cmp	r3, #46	@ 0x2e
 8003274:	d10a      	bne.n	800328c <_svfiprintf_r+0x130>
 8003276:	7863      	ldrb	r3, [r4, #1]
 8003278:	2b2a      	cmp	r3, #42	@ 0x2a
 800327a:	d132      	bne.n	80032e2 <_svfiprintf_r+0x186>
 800327c:	9b03      	ldr	r3, [sp, #12]
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	9203      	str	r2, [sp, #12]
 8003284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003288:	3402      	adds	r4, #2
 800328a:	9305      	str	r3, [sp, #20]
 800328c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003350 <_svfiprintf_r+0x1f4>
 8003290:	7821      	ldrb	r1, [r4, #0]
 8003292:	2203      	movs	r2, #3
 8003294:	4650      	mov	r0, sl
 8003296:	f7fc ffb3 	bl	8000200 <memchr>
 800329a:	b138      	cbz	r0, 80032ac <_svfiprintf_r+0x150>
 800329c:	9b04      	ldr	r3, [sp, #16]
 800329e:	eba0 000a 	sub.w	r0, r0, sl
 80032a2:	2240      	movs	r2, #64	@ 0x40
 80032a4:	4082      	lsls	r2, r0
 80032a6:	4313      	orrs	r3, r2
 80032a8:	3401      	adds	r4, #1
 80032aa:	9304      	str	r3, [sp, #16]
 80032ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b0:	4824      	ldr	r0, [pc, #144]	@ (8003344 <_svfiprintf_r+0x1e8>)
 80032b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032b6:	2206      	movs	r2, #6
 80032b8:	f7fc ffa2 	bl	8000200 <memchr>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d036      	beq.n	800332e <_svfiprintf_r+0x1d2>
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <_svfiprintf_r+0x1ec>)
 80032c2:	bb1b      	cbnz	r3, 800330c <_svfiprintf_r+0x1b0>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	3307      	adds	r3, #7
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	3308      	adds	r3, #8
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032d2:	4433      	add	r3, r6
 80032d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032d6:	e76a      	b.n	80031ae <_svfiprintf_r+0x52>
 80032d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032dc:	460c      	mov	r4, r1
 80032de:	2001      	movs	r0, #1
 80032e0:	e7a8      	b.n	8003234 <_svfiprintf_r+0xd8>
 80032e2:	2300      	movs	r3, #0
 80032e4:	3401      	adds	r4, #1
 80032e6:	9305      	str	r3, [sp, #20]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 0c0a 	mov.w	ip, #10
 80032ee:	4620      	mov	r0, r4
 80032f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f4:	3a30      	subs	r2, #48	@ 0x30
 80032f6:	2a09      	cmp	r2, #9
 80032f8:	d903      	bls.n	8003302 <_svfiprintf_r+0x1a6>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0c6      	beq.n	800328c <_svfiprintf_r+0x130>
 80032fe:	9105      	str	r1, [sp, #20]
 8003300:	e7c4      	b.n	800328c <_svfiprintf_r+0x130>
 8003302:	fb0c 2101 	mla	r1, ip, r1, r2
 8003306:	4604      	mov	r4, r0
 8003308:	2301      	movs	r3, #1
 800330a:	e7f0      	b.n	80032ee <_svfiprintf_r+0x192>
 800330c:	ab03      	add	r3, sp, #12
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	462a      	mov	r2, r5
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <_svfiprintf_r+0x1f0>)
 8003314:	a904      	add	r1, sp, #16
 8003316:	4638      	mov	r0, r7
 8003318:	f3af 8000 	nop.w
 800331c:	1c42      	adds	r2, r0, #1
 800331e:	4606      	mov	r6, r0
 8003320:	d1d6      	bne.n	80032d0 <_svfiprintf_r+0x174>
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	065b      	lsls	r3, r3, #25
 8003326:	f53f af2d 	bmi.w	8003184 <_svfiprintf_r+0x28>
 800332a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800332c:	e72c      	b.n	8003188 <_svfiprintf_r+0x2c>
 800332e:	ab03      	add	r3, sp, #12
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	462a      	mov	r2, r5
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <_svfiprintf_r+0x1f0>)
 8003336:	a904      	add	r1, sp, #16
 8003338:	4638      	mov	r0, r7
 800333a:	f000 f879 	bl	8003430 <_printf_i>
 800333e:	e7ed      	b.n	800331c <_svfiprintf_r+0x1c0>
 8003340:	08003784 	.word	0x08003784
 8003344:	0800378e 	.word	0x0800378e
 8003348:	00000000 	.word	0x00000000
 800334c:	080030a5 	.word	0x080030a5
 8003350:	0800378a 	.word	0x0800378a

08003354 <_printf_common>:
 8003354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003358:	4616      	mov	r6, r2
 800335a:	4698      	mov	r8, r3
 800335c:	688a      	ldr	r2, [r1, #8]
 800335e:	690b      	ldr	r3, [r1, #16]
 8003360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003364:	4293      	cmp	r3, r2
 8003366:	bfb8      	it	lt
 8003368:	4613      	movlt	r3, r2
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003370:	4607      	mov	r7, r0
 8003372:	460c      	mov	r4, r1
 8003374:	b10a      	cbz	r2, 800337a <_printf_common+0x26>
 8003376:	3301      	adds	r3, #1
 8003378:	6033      	str	r3, [r6, #0]
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	0699      	lsls	r1, r3, #26
 800337e:	bf42      	ittt	mi
 8003380:	6833      	ldrmi	r3, [r6, #0]
 8003382:	3302      	addmi	r3, #2
 8003384:	6033      	strmi	r3, [r6, #0]
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	f015 0506 	ands.w	r5, r5, #6
 800338c:	d106      	bne.n	800339c <_printf_common+0x48>
 800338e:	f104 0a19 	add.w	sl, r4, #25
 8003392:	68e3      	ldr	r3, [r4, #12]
 8003394:	6832      	ldr	r2, [r6, #0]
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	42ab      	cmp	r3, r5
 800339a:	dc26      	bgt.n	80033ea <_printf_common+0x96>
 800339c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	3b00      	subs	r3, #0
 80033a4:	bf18      	it	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	0692      	lsls	r2, r2, #26
 80033aa:	d42b      	bmi.n	8003404 <_printf_common+0xb0>
 80033ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033b0:	4641      	mov	r1, r8
 80033b2:	4638      	mov	r0, r7
 80033b4:	47c8      	blx	r9
 80033b6:	3001      	adds	r0, #1
 80033b8:	d01e      	beq.n	80033f8 <_printf_common+0xa4>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	6922      	ldr	r2, [r4, #16]
 80033be:	f003 0306 	and.w	r3, r3, #6
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf02      	ittt	eq
 80033c6:	68e5      	ldreq	r5, [r4, #12]
 80033c8:	6833      	ldreq	r3, [r6, #0]
 80033ca:	1aed      	subeq	r5, r5, r3
 80033cc:	68a3      	ldr	r3, [r4, #8]
 80033ce:	bf0c      	ite	eq
 80033d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d4:	2500      	movne	r5, #0
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bfc4      	itt	gt
 80033da:	1a9b      	subgt	r3, r3, r2
 80033dc:	18ed      	addgt	r5, r5, r3
 80033de:	2600      	movs	r6, #0
 80033e0:	341a      	adds	r4, #26
 80033e2:	42b5      	cmp	r5, r6
 80033e4:	d11a      	bne.n	800341c <_printf_common+0xc8>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e008      	b.n	80033fc <_printf_common+0xa8>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4652      	mov	r2, sl
 80033ee:	4641      	mov	r1, r8
 80033f0:	4638      	mov	r0, r7
 80033f2:	47c8      	blx	r9
 80033f4:	3001      	adds	r0, #1
 80033f6:	d103      	bne.n	8003400 <_printf_common+0xac>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003400:	3501      	adds	r5, #1
 8003402:	e7c6      	b.n	8003392 <_printf_common+0x3e>
 8003404:	18e1      	adds	r1, r4, r3
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	2030      	movs	r0, #48	@ 0x30
 800340a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800340e:	4422      	add	r2, r4
 8003410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003418:	3302      	adds	r3, #2
 800341a:	e7c7      	b.n	80033ac <_printf_common+0x58>
 800341c:	2301      	movs	r3, #1
 800341e:	4622      	mov	r2, r4
 8003420:	4641      	mov	r1, r8
 8003422:	4638      	mov	r0, r7
 8003424:	47c8      	blx	r9
 8003426:	3001      	adds	r0, #1
 8003428:	d0e6      	beq.n	80033f8 <_printf_common+0xa4>
 800342a:	3601      	adds	r6, #1
 800342c:	e7d9      	b.n	80033e2 <_printf_common+0x8e>
	...

08003430 <_printf_i>:
 8003430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	7e0f      	ldrb	r7, [r1, #24]
 8003436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003438:	2f78      	cmp	r7, #120	@ 0x78
 800343a:	4691      	mov	r9, r2
 800343c:	4680      	mov	r8, r0
 800343e:	460c      	mov	r4, r1
 8003440:	469a      	mov	sl, r3
 8003442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003446:	d807      	bhi.n	8003458 <_printf_i+0x28>
 8003448:	2f62      	cmp	r7, #98	@ 0x62
 800344a:	d80a      	bhi.n	8003462 <_printf_i+0x32>
 800344c:	2f00      	cmp	r7, #0
 800344e:	f000 80d2 	beq.w	80035f6 <_printf_i+0x1c6>
 8003452:	2f58      	cmp	r7, #88	@ 0x58
 8003454:	f000 80b9 	beq.w	80035ca <_printf_i+0x19a>
 8003458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800345c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003460:	e03a      	b.n	80034d8 <_printf_i+0xa8>
 8003462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003466:	2b15      	cmp	r3, #21
 8003468:	d8f6      	bhi.n	8003458 <_printf_i+0x28>
 800346a:	a101      	add	r1, pc, #4	@ (adr r1, 8003470 <_printf_i+0x40>)
 800346c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003470:	080034c9 	.word	0x080034c9
 8003474:	080034dd 	.word	0x080034dd
 8003478:	08003459 	.word	0x08003459
 800347c:	08003459 	.word	0x08003459
 8003480:	08003459 	.word	0x08003459
 8003484:	08003459 	.word	0x08003459
 8003488:	080034dd 	.word	0x080034dd
 800348c:	08003459 	.word	0x08003459
 8003490:	08003459 	.word	0x08003459
 8003494:	08003459 	.word	0x08003459
 8003498:	08003459 	.word	0x08003459
 800349c:	080035dd 	.word	0x080035dd
 80034a0:	08003507 	.word	0x08003507
 80034a4:	08003597 	.word	0x08003597
 80034a8:	08003459 	.word	0x08003459
 80034ac:	08003459 	.word	0x08003459
 80034b0:	080035ff 	.word	0x080035ff
 80034b4:	08003459 	.word	0x08003459
 80034b8:	08003507 	.word	0x08003507
 80034bc:	08003459 	.word	0x08003459
 80034c0:	08003459 	.word	0x08003459
 80034c4:	0800359f 	.word	0x0800359f
 80034c8:	6833      	ldr	r3, [r6, #0]
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6032      	str	r2, [r6, #0]
 80034d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034d8:	2301      	movs	r3, #1
 80034da:	e09d      	b.n	8003618 <_printf_i+0x1e8>
 80034dc:	6833      	ldr	r3, [r6, #0]
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	1d19      	adds	r1, r3, #4
 80034e2:	6031      	str	r1, [r6, #0]
 80034e4:	0606      	lsls	r6, r0, #24
 80034e6:	d501      	bpl.n	80034ec <_printf_i+0xbc>
 80034e8:	681d      	ldr	r5, [r3, #0]
 80034ea:	e003      	b.n	80034f4 <_printf_i+0xc4>
 80034ec:	0645      	lsls	r5, r0, #25
 80034ee:	d5fb      	bpl.n	80034e8 <_printf_i+0xb8>
 80034f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034f4:	2d00      	cmp	r5, #0
 80034f6:	da03      	bge.n	8003500 <_printf_i+0xd0>
 80034f8:	232d      	movs	r3, #45	@ 0x2d
 80034fa:	426d      	negs	r5, r5
 80034fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003500:	4859      	ldr	r0, [pc, #356]	@ (8003668 <_printf_i+0x238>)
 8003502:	230a      	movs	r3, #10
 8003504:	e011      	b.n	800352a <_printf_i+0xfa>
 8003506:	6821      	ldr	r1, [r4, #0]
 8003508:	6833      	ldr	r3, [r6, #0]
 800350a:	0608      	lsls	r0, r1, #24
 800350c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003510:	d402      	bmi.n	8003518 <_printf_i+0xe8>
 8003512:	0649      	lsls	r1, r1, #25
 8003514:	bf48      	it	mi
 8003516:	b2ad      	uxthmi	r5, r5
 8003518:	2f6f      	cmp	r7, #111	@ 0x6f
 800351a:	4853      	ldr	r0, [pc, #332]	@ (8003668 <_printf_i+0x238>)
 800351c:	6033      	str	r3, [r6, #0]
 800351e:	bf14      	ite	ne
 8003520:	230a      	movne	r3, #10
 8003522:	2308      	moveq	r3, #8
 8003524:	2100      	movs	r1, #0
 8003526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800352a:	6866      	ldr	r6, [r4, #4]
 800352c:	60a6      	str	r6, [r4, #8]
 800352e:	2e00      	cmp	r6, #0
 8003530:	bfa2      	ittt	ge
 8003532:	6821      	ldrge	r1, [r4, #0]
 8003534:	f021 0104 	bicge.w	r1, r1, #4
 8003538:	6021      	strge	r1, [r4, #0]
 800353a:	b90d      	cbnz	r5, 8003540 <_printf_i+0x110>
 800353c:	2e00      	cmp	r6, #0
 800353e:	d04b      	beq.n	80035d8 <_printf_i+0x1a8>
 8003540:	4616      	mov	r6, r2
 8003542:	fbb5 f1f3 	udiv	r1, r5, r3
 8003546:	fb03 5711 	mls	r7, r3, r1, r5
 800354a:	5dc7      	ldrb	r7, [r0, r7]
 800354c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003550:	462f      	mov	r7, r5
 8003552:	42bb      	cmp	r3, r7
 8003554:	460d      	mov	r5, r1
 8003556:	d9f4      	bls.n	8003542 <_printf_i+0x112>
 8003558:	2b08      	cmp	r3, #8
 800355a:	d10b      	bne.n	8003574 <_printf_i+0x144>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	07df      	lsls	r7, r3, #31
 8003560:	d508      	bpl.n	8003574 <_printf_i+0x144>
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	6861      	ldr	r1, [r4, #4]
 8003566:	4299      	cmp	r1, r3
 8003568:	bfde      	ittt	le
 800356a:	2330      	movle	r3, #48	@ 0x30
 800356c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003570:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003574:	1b92      	subs	r2, r2, r6
 8003576:	6122      	str	r2, [r4, #16]
 8003578:	f8cd a000 	str.w	sl, [sp]
 800357c:	464b      	mov	r3, r9
 800357e:	aa03      	add	r2, sp, #12
 8003580:	4621      	mov	r1, r4
 8003582:	4640      	mov	r0, r8
 8003584:	f7ff fee6 	bl	8003354 <_printf_common>
 8003588:	3001      	adds	r0, #1
 800358a:	d14a      	bne.n	8003622 <_printf_i+0x1f2>
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	b004      	add	sp, #16
 8003592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	f043 0320 	orr.w	r3, r3, #32
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	4833      	ldr	r0, [pc, #204]	@ (800366c <_printf_i+0x23c>)
 80035a0:	2778      	movs	r7, #120	@ 0x78
 80035a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	6831      	ldr	r1, [r6, #0]
 80035aa:	061f      	lsls	r7, r3, #24
 80035ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80035b0:	d402      	bmi.n	80035b8 <_printf_i+0x188>
 80035b2:	065f      	lsls	r7, r3, #25
 80035b4:	bf48      	it	mi
 80035b6:	b2ad      	uxthmi	r5, r5
 80035b8:	6031      	str	r1, [r6, #0]
 80035ba:	07d9      	lsls	r1, r3, #31
 80035bc:	bf44      	itt	mi
 80035be:	f043 0320 	orrmi.w	r3, r3, #32
 80035c2:	6023      	strmi	r3, [r4, #0]
 80035c4:	b11d      	cbz	r5, 80035ce <_printf_i+0x19e>
 80035c6:	2310      	movs	r3, #16
 80035c8:	e7ac      	b.n	8003524 <_printf_i+0xf4>
 80035ca:	4827      	ldr	r0, [pc, #156]	@ (8003668 <_printf_i+0x238>)
 80035cc:	e7e9      	b.n	80035a2 <_printf_i+0x172>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f023 0320 	bic.w	r3, r3, #32
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	e7f6      	b.n	80035c6 <_printf_i+0x196>
 80035d8:	4616      	mov	r6, r2
 80035da:	e7bd      	b.n	8003558 <_printf_i+0x128>
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	6961      	ldr	r1, [r4, #20]
 80035e2:	1d18      	adds	r0, r3, #4
 80035e4:	6030      	str	r0, [r6, #0]
 80035e6:	062e      	lsls	r6, r5, #24
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	d501      	bpl.n	80035f0 <_printf_i+0x1c0>
 80035ec:	6019      	str	r1, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <_printf_i+0x1c6>
 80035f0:	0668      	lsls	r0, r5, #25
 80035f2:	d5fb      	bpl.n	80035ec <_printf_i+0x1bc>
 80035f4:	8019      	strh	r1, [r3, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	4616      	mov	r6, r2
 80035fc:	e7bc      	b.n	8003578 <_printf_i+0x148>
 80035fe:	6833      	ldr	r3, [r6, #0]
 8003600:	1d1a      	adds	r2, r3, #4
 8003602:	6032      	str	r2, [r6, #0]
 8003604:	681e      	ldr	r6, [r3, #0]
 8003606:	6862      	ldr	r2, [r4, #4]
 8003608:	2100      	movs	r1, #0
 800360a:	4630      	mov	r0, r6
 800360c:	f7fc fdf8 	bl	8000200 <memchr>
 8003610:	b108      	cbz	r0, 8003616 <_printf_i+0x1e6>
 8003612:	1b80      	subs	r0, r0, r6
 8003614:	6060      	str	r0, [r4, #4]
 8003616:	6863      	ldr	r3, [r4, #4]
 8003618:	6123      	str	r3, [r4, #16]
 800361a:	2300      	movs	r3, #0
 800361c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003620:	e7aa      	b.n	8003578 <_printf_i+0x148>
 8003622:	6923      	ldr	r3, [r4, #16]
 8003624:	4632      	mov	r2, r6
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	47d0      	blx	sl
 800362c:	3001      	adds	r0, #1
 800362e:	d0ad      	beq.n	800358c <_printf_i+0x15c>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	079b      	lsls	r3, r3, #30
 8003634:	d413      	bmi.n	800365e <_printf_i+0x22e>
 8003636:	68e0      	ldr	r0, [r4, #12]
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	4298      	cmp	r0, r3
 800363c:	bfb8      	it	lt
 800363e:	4618      	movlt	r0, r3
 8003640:	e7a6      	b.n	8003590 <_printf_i+0x160>
 8003642:	2301      	movs	r3, #1
 8003644:	4632      	mov	r2, r6
 8003646:	4649      	mov	r1, r9
 8003648:	4640      	mov	r0, r8
 800364a:	47d0      	blx	sl
 800364c:	3001      	adds	r0, #1
 800364e:	d09d      	beq.n	800358c <_printf_i+0x15c>
 8003650:	3501      	adds	r5, #1
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	9903      	ldr	r1, [sp, #12]
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	42ab      	cmp	r3, r5
 800365a:	dcf2      	bgt.n	8003642 <_printf_i+0x212>
 800365c:	e7eb      	b.n	8003636 <_printf_i+0x206>
 800365e:	2500      	movs	r5, #0
 8003660:	f104 0619 	add.w	r6, r4, #25
 8003664:	e7f5      	b.n	8003652 <_printf_i+0x222>
 8003666:	bf00      	nop
 8003668:	08003795 	.word	0x08003795
 800366c:	080037a6 	.word	0x080037a6

08003670 <memmove>:
 8003670:	4288      	cmp	r0, r1
 8003672:	b510      	push	{r4, lr}
 8003674:	eb01 0402 	add.w	r4, r1, r2
 8003678:	d902      	bls.n	8003680 <memmove+0x10>
 800367a:	4284      	cmp	r4, r0
 800367c:	4623      	mov	r3, r4
 800367e:	d807      	bhi.n	8003690 <memmove+0x20>
 8003680:	1e43      	subs	r3, r0, #1
 8003682:	42a1      	cmp	r1, r4
 8003684:	d008      	beq.n	8003698 <memmove+0x28>
 8003686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800368a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800368e:	e7f8      	b.n	8003682 <memmove+0x12>
 8003690:	4402      	add	r2, r0
 8003692:	4601      	mov	r1, r0
 8003694:	428a      	cmp	r2, r1
 8003696:	d100      	bne.n	800369a <memmove+0x2a>
 8003698:	bd10      	pop	{r4, pc}
 800369a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800369e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036a2:	e7f7      	b.n	8003694 <memmove+0x24>

080036a4 <_sbrk_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4d06      	ldr	r5, [pc, #24]	@ (80036c0 <_sbrk_r+0x1c>)
 80036a8:	2300      	movs	r3, #0
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	f7fd fae6 	bl	8000c80 <_sbrk>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d102      	bne.n	80036be <_sbrk_r+0x1a>
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	b103      	cbz	r3, 80036be <_sbrk_r+0x1a>
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	bd38      	pop	{r3, r4, r5, pc}
 80036c0:	20000258 	.word	0x20000258

080036c4 <memcpy>:
 80036c4:	440a      	add	r2, r1
 80036c6:	4291      	cmp	r1, r2
 80036c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036cc:	d100      	bne.n	80036d0 <memcpy+0xc>
 80036ce:	4770      	bx	lr
 80036d0:	b510      	push	{r4, lr}
 80036d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036da:	4291      	cmp	r1, r2
 80036dc:	d1f9      	bne.n	80036d2 <memcpy+0xe>
 80036de:	bd10      	pop	{r4, pc}

080036e0 <_realloc_r>:
 80036e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e4:	4680      	mov	r8, r0
 80036e6:	4615      	mov	r5, r2
 80036e8:	460c      	mov	r4, r1
 80036ea:	b921      	cbnz	r1, 80036f6 <_realloc_r+0x16>
 80036ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036f0:	4611      	mov	r1, r2
 80036f2:	f7ff bc4b 	b.w	8002f8c <_malloc_r>
 80036f6:	b92a      	cbnz	r2, 8003704 <_realloc_r+0x24>
 80036f8:	f7ff fbdc 	bl	8002eb4 <_free_r>
 80036fc:	2400      	movs	r4, #0
 80036fe:	4620      	mov	r0, r4
 8003700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003704:	f000 f81a 	bl	800373c <_malloc_usable_size_r>
 8003708:	4285      	cmp	r5, r0
 800370a:	4606      	mov	r6, r0
 800370c:	d802      	bhi.n	8003714 <_realloc_r+0x34>
 800370e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003712:	d8f4      	bhi.n	80036fe <_realloc_r+0x1e>
 8003714:	4629      	mov	r1, r5
 8003716:	4640      	mov	r0, r8
 8003718:	f7ff fc38 	bl	8002f8c <_malloc_r>
 800371c:	4607      	mov	r7, r0
 800371e:	2800      	cmp	r0, #0
 8003720:	d0ec      	beq.n	80036fc <_realloc_r+0x1c>
 8003722:	42b5      	cmp	r5, r6
 8003724:	462a      	mov	r2, r5
 8003726:	4621      	mov	r1, r4
 8003728:	bf28      	it	cs
 800372a:	4632      	movcs	r2, r6
 800372c:	f7ff ffca 	bl	80036c4 <memcpy>
 8003730:	4621      	mov	r1, r4
 8003732:	4640      	mov	r0, r8
 8003734:	f7ff fbbe 	bl	8002eb4 <_free_r>
 8003738:	463c      	mov	r4, r7
 800373a:	e7e0      	b.n	80036fe <_realloc_r+0x1e>

0800373c <_malloc_usable_size_r>:
 800373c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003740:	1f18      	subs	r0, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfbc      	itt	lt
 8003746:	580b      	ldrlt	r3, [r1, r0]
 8003748:	18c0      	addlt	r0, r0, r3
 800374a:	4770      	bx	lr

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
